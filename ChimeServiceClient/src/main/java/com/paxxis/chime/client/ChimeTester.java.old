/*
 * 
 * 
 */  

package com.paxxis.chime.client;

import com.paxxis.chime.client.common.ApplyTagRequest;
import com.paxxis.chime.client.common.ApplyTagRequest.ApplyType;
import com.paxxis.chime.client.common.ApplyTagResponse;
import com.paxxis.chime.client.common.Community;
import com.paxxis.chime.client.common.Cursor;
import com.paxxis.chime.client.common.DataField;
import com.paxxis.chime.client.common.DataFieldValue;
import com.paxxis.chime.client.common.DataInstance;
import com.paxxis.chime.client.common.DataInstanceRequest;
import com.paxxis.chime.client.common.DataInstanceRequest.Depth;
import com.paxxis.chime.client.common.DataInstanceRequest.Operator;
import com.paxxis.chime.client.common.DataInstanceRequest.SortOrder;
import com.paxxis.chime.client.common.DataInstanceResponse;
import com.paxxis.chime.client.common.DataType;
import com.paxxis.chime.client.common.DataTypeRequest;
import com.paxxis.chime.client.common.DataTypeResponse;
import com.paxxis.chime.client.common.EditDataInstanceRequest;
import com.paxxis.chime.client.common.EditDataInstanceRequest.Operation;
import com.paxxis.chime.client.common.EditDataInstanceResponse;
import com.paxxis.chime.client.common.EditDataTypeRequest;
import com.paxxis.chime.client.common.EditPortalTemplateRequest;
import com.paxxis.chime.client.common.LoginRequest;
import com.paxxis.chime.client.common.LoginResponse;
import com.paxxis.chime.client.common.TagContext;
import com.paxxis.chime.client.common.User;
import com.paxxis.chime.client.common.UserContextRequest;
import com.paxxis.chime.client.common.UserContextResponse;
import com.paxxis.chime.json.JSONArray;
import com.paxxis.chime.json.JSONObject;
import com.paxxis.chime.json.parser.JSONParser;
import com.paxxis.chime.client.common.ErrorMessage;
import com.paxxis.chime.service.JndiInitialContextFactory;
import com.paxxis.chime.service.LogManager;
import com.paxxis.chime.client.common.Message;
import com.paxxis.chime.client.common.Scope;
import com.paxxis.chime.client.common.portal.PortalColumn;
import com.paxxis.chime.client.common.portal.PortalTemplate;
import com.paxxis.chime.client.common.portal.PortletSpecification;
import com.paxxis.chime.common.MessagePayload;
import com.paxxis.chime.common.ObjectPayloadType;
import com.paxxis.chime.service.RequestQueueSender;
import com.paxxis.chime.service.ServiceBusConnector;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class WorkEnvelope implements Runnable
{
    public void run()
    {
        new ChimeTester();
    }
}

public class ChimeTester
{
    static LogManager logmgr = new LogManager("INFO");
    static MessagePayload _payloadType = new ObjectPayloadType();
    static final int EACH = 5;
    static final int USERS = 1;
    static final int TOTAL = EACH * USERS;
    static final int POOLSIZE = 5;
    static final boolean DOREQUESTREPLY = true;
    static ExecutorService _executor = null;

    static int _responseCount = 0;
    Object _semaphore = new Object();
    static long _startTime;
    
    JndiInitialContextFactory _contextFactory;
    RequestQueueSender _sender;
    ServiceBusConnector _connector;
    //ServiceBusManagementBean _mbean;
    
    
    /** Creates a new instance of Authenticate for unit and functional testing */
    public ChimeTester()
    {
        setup();

        importPacList();
        //importCommittees();
        //importSponsors();
        //importVenues();
        //importStates();
        //importCuisines();
        //importRestFeatures();
        //importRestCategories();
        //importAtmospheres();
        //addInvestorFields();
        //createRichTextType();
        //addImageGalleryField();
        //addProjectIssueFields();
        //addProjectComponentFields();
        //createDataLicenseType();
        //createImageType();
        //addNewsSourceFields();
        //updateField();
        //scopeTests();
        //createSoftwarePubisherType();
        //createSoftwarePackageType();
        //joinCommunities();
        //createCommunities();
        //createCommunityType();
        //createDiscussionType();
        //createDataType();
        //createPortalTemplate();
        //createPortalPageType();
        //buildNews();
        //createNewsType();
        //addUserField();
        //createSearchCollectionType();
        //createNamedSearchType();
        //importEvaluations();
        //createEvaluationType();
        //importTerms();
        //importClasses();
        //importClassStatus();
        //createSternDataTypes();
        //executeBlues();
        //execute();
        //executePublishers();
        //execute("");
    }
    
    public static void main(String[] args)
    {
        _executor = Executors.newFixedThreadPool(POOLSIZE);
        _startTime = System.currentTimeMillis();

        for (int i = 0; i < USERS; i++)
        {
            _executor.submit(new WorkEnvelope());
        }
    }
    
    public void setup()
    {

        _contextFactory = new JndiInitialContextFactory();

       // _contextFactory.setContextFactory("com.sun.jndi.fscontext.RefFSContextFactory");
        //_contextFactory.setProviderUrl("file:///Users/rob/mq4.1/objectStore");

        _contextFactory.setContextFactory("org.apache.activemq.jndi.ActiveMQInitialContextFactory");
        _contextFactory.setProviderUrl("tcp://rye:61616");

        //senderPool = new ServiceBusSenderPool(10, _contextFactory, "cn=cornerstoneFactory", "ChimeRequestQueue");
        /*
        _contextFactory.setContextFactory("com.sun.jndi.ldap.LdapCtxFactory"); 
        _contextFactory.setProviderUrl("ldap://hdco14.central.sun.com:389/o=jms");
        */

        _connector = new ServiceBusConnector();
        _sender = new RequestQueueSender();
        _connector.addServiceBusConnectorClient(_sender);
        _connector.setInitialContextFactory(_contextFactory);
        //_mbean = new ServiceBusManagementBean();
        //_mbean.setConnector(_connector);
        _connector.setConnectionFactoryName("cn=cornerstoneFactory");
        _sender.setRequestQueueName("ChimeRequestQueue");
        _connector.connect();
            
    }

    public void importCuisines() {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Cuisine");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType specType = ((DataTypeResponse)typeResponse).getDataType();


            BufferedReader br = new BufferedReader(new FileReader("cuisines.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                if (parts.length > 1) {
                    String name = parts[0].trim();
                    String desc = parts[1].trim();
                    String url = "";
                    String detail = "";
                    if (parts.length > 2) {
                        url = "<a href=\"" + parts[2].trim() + "\">Full Wikipedia Article</a>";
                        detail = url;
                    }

                    if (parts.length > 3) {
                        detail = parts[3].trim() + "<br><br>" + url;
                    }

                    if (name.length() > 0)
                    {
                        EditDataInstanceRequest request = new EditDataInstanceRequest();
                        request.setUser(me);
                        request.addType(specType);
                        request.setOperation(EditDataInstanceRequest.Operation.Create);
                        request.setName(name);
                        request.setDescription(desc);

                        Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                        request.addScope(scope);
                        request.addScope(new Scope(Community.Global, Scope.Permission.R));

                        DataField detailField = specType.getField("Details");
                        request.addFieldData(specType, detailField, detail);

                        Message response = client.execute(request, new EditInstanceResponseHandler());
                        int y = 1;
                    }

                    int x = 1;
                }
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }

    }

    public void importVenues() {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }


            // Cuisines
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Cuisine");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType cuisineType = ((DataTypeResponse)typeResponse).getDataType();

            DataInstanceRequest req2 = new DataInstanceRequest();
            req2.setUser(me);
            req2.setDataShapeName(cuisineType.getName());
            req2.setCursor(new Cursor(100));
            req2.setDepth(Depth.Shallow);
            req2.setSortOrder(SortOrder.ByRelevance);

            DataInstanceResponse response = (DataInstanceResponse)client.execute(req2, new DataInstanceResponseHandler());
            List<DataInstance> instances = response.getDataInstances();
            HashMap<String, DataInstance> cuisineMap = new HashMap<String, DataInstance>();
            for (DataInstance instance : instances) {
                cuisineMap.put(instance.getName().toUpperCase(), instance);
            }

            // features
            req = new DataTypeRequest();
            req.setName("Venue Feature");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType featureType = ((DataTypeResponse)typeResponse).getDataType();

            req2 = new DataInstanceRequest();
            req2.setUser(me);
            req2.setDataShapeName(featureType.getName());
            req2.setCursor(new Cursor(100));
            req2.setDepth(Depth.Shallow);
            req2.setSortOrder(SortOrder.ByRelevance);

            response = (DataInstanceResponse)client.execute(req2, new DataInstanceResponseHandler());
            instances = response.getDataInstances();
            HashMap<String, DataInstance> featureMap = new HashMap<String, DataInstance>();
            for (DataInstance instance : instances) {
                featureMap.put(instance.getName().toUpperCase(), instance);
            }

            // atmospheres
            req = new DataTypeRequest();
            req.setName("Venue Atmosphere");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType atmosphereType = ((DataTypeResponse)typeResponse).getDataType();

            req2 = new DataInstanceRequest();
            req2.setUser(me);
            req2.setDataShapeName(atmosphereType.getName());
            req2.setCursor(new Cursor(100));
            req2.setDepth(Depth.Shallow);
            req2.setSortOrder(SortOrder.ByRelevance);

            response = (DataInstanceResponse)client.execute(req2, new DataInstanceResponseHandler());
            instances = response.getDataInstances();
            HashMap<String, DataInstance> atmosphereMap = new HashMap<String, DataInstance>();
            for (DataInstance instance : instances) {
                atmosphereMap.put(instance.getName().toUpperCase(), instance);
            }

            // Categories
            req = new DataTypeRequest();
            req.setName("Venue Category");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType categoryType = ((DataTypeResponse)typeResponse).getDataType();

            req2 = new DataInstanceRequest();
            req2.setUser(me);
            req2.setDataShapeName(categoryType.getName());
            req2.setCursor(new Cursor(100));
            req2.setDepth(Depth.Shallow);
            req2.setSortOrder(SortOrder.ByRelevance);

            response = (DataInstanceResponse)client.execute(req2, new DataInstanceResponseHandler());
            instances = response.getDataInstances();
            HashMap<String, DataInstance> categoryMap = new HashMap<String, DataInstance>();
            for (DataInstance instance : instances) {
                categoryMap.put(instance.getName().toUpperCase(), instance);
            }

            // States
            req = new DataTypeRequest();
            req.setName("State Abbreviation");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType stateType = ((DataTypeResponse)typeResponse).getDataType();

            req2 = new DataInstanceRequest();
            req2.setUser(me);
            req2.setDataShapeName(stateType.getName());
            req2.setCursor(new Cursor(100));
            req2.setDepth(Depth.Shallow);
            req2.setSortOrder(SortOrder.ByRelevance);

            response = (DataInstanceResponse)client.execute(req2, new DataInstanceResponseHandler());
            instances = response.getDataInstances();
            HashMap<String, DataInstance> stateMap = new HashMap<String, DataInstance>();
            for (DataInstance instance : instances) {
                stateMap.put(instance.getName().toUpperCase(), instance);
            }

            req = new DataTypeRequest();
            req.setName("Venue");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType venueType = ((DataTypeResponse)typeResponse).getDataType();

            req = new DataTypeRequest();
            req.setName("US Address");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType addressType = ((DataTypeResponse)typeResponse).getDataType();


            BufferedReader br = new BufferedReader(new FileReader("Restaurants.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] pieces = thisLine.split("\\|");
                String[] parts = new String[69];

                int cnt = pieces.length;
                for (int i = 0; i < cnt; i++) {
                    parts[i] = pieces[i];
                }

                for (int i = cnt; i < 69; i++) {
                    parts[i] = "";
                }
                
                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setUser(me);
                request.addType(venueType);
                request.addType(addressType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);

                Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                request.addScope(scope);
                request.addScope(new Scope(Community.Global, Scope.Permission.R));

                String name = parts[1];
                request.setName(name);
                request.setDescription("");

                String id = parts[0];
                DataField field = venueType.getField("Oddity ID");
                request.addFieldData(venueType, field, id);

                String website = parts[6].trim();
                field = venueType.getField("Website");
                if (website.length() > 0) {
                    request.addFieldData(venueType, field, website);
                }

                field = venueType.getField("Cuisine");
                for (int i = 7; i < 23; i++) { 
                    String cuisine = parts[i].trim();
                    if (cuisine.length() > 0) {
                        request.addFieldData(venueType, field, cuisineMap.get(cuisine.toUpperCase()));
                    }
                }

                field = venueType.getField("Atmosphere");
                for (int i = 23; i < 36; i++) {
                    String atmos = parts[i].trim();
                    if (atmos.length() > 0) {
                        request.addFieldData(venueType, field, atmosphereMap.get(atmos.toUpperCase()));
                    }
                }

                field = venueType.getField("Category");
                for (int i = 42; i < 50; i++) {
                    String n = parts[i].trim();
                    if (n.length() > 0) {
                        request.addFieldData(venueType, field, categoryMap.get(n.toUpperCase()));
                    }
                }

                field = venueType.getField("Special Features");
                for (int i = 50; i < 68; i++) {
                    String n = parts[i].trim();
                    if (n.length() > 0) {
                        request.addFieldData(venueType, field, featureMap.get(n.toUpperCase()));
                    }
                }

                StringBuffer payment = new StringBuffer();
                String op = "";

                field = venueType.getField("Payment");
                for (int i = 37; i < 42; i++) {
                    String n = parts[i].trim();
                    if (n.length() > 0) {
                        payment.append(op + n);
                        op = ", ";
                    }
                }
                request.addFieldData(venueType, field, payment.toString());

                field = venueType.getField("Hours");
                String n = parts[36].trim();
                if (n.length() > 0) {
                    request.addFieldData(venueType, field, n);
                }

                //EditDataInstanceResponse resp = (EditDataInstanceResponse)client.execute(request, new EditInstanceResponseHandler());
                //DataInstance newInstance = resp.getDataInstance();

                int y = 1;

                // so far so good

                //newInstance.getTypes().add(addressType);

                //request = new EditDataInstanceRequest();
                //request.setDataInstance(newInstance);
                //request.setOperation(Operation.UpdateTypes);
                //request.setUser(me);

                //Message msg = client.execute(request, new EditInstanceResponseHandler());
                //resp = (EditDataInstanceResponse)msg;
                //newInstance = resp.getDataInstance();

                // address stuff
                //request = new EditDataInstanceRequest();
                //request.setUser(me);
                //request.addType(addressType);
                //request.setDataInstance(newInstance);
                //request.setOperation(EditDataInstanceRequest.Operation.AddFieldData);

                String street = parts[68].trim();
                if (street.length() > 0) {
                    field = addressType.getField("Street Address");
                    request.addFieldData(addressType, field, street);
                }

                String city = parts[2].trim();
                if (city.length() > 0) {
                    field = addressType.getField("City");
                    request.addFieldData(addressType, field, city);
                }

                String state = parts[3].trim();
                if (state.length() > 0) {
                    field = addressType.getField("State");
                    request.addFieldData(addressType, field, stateMap.get(state.toUpperCase()));
                }
                
                String zip = parts[4].trim();
                if (zip.length() > 0) {
                    field = addressType.getField("Postal Code");
                    request.addFieldData(addressType, field, zip);
                }

                String phone = parts[5].trim();
                if (phone.length() > 0) {
                    field = addressType.getField("Telephone");
                    request.addFieldData(addressType, field, phone);
                }

                Message msg = client.execute(request, new EditInstanceResponseHandler());
                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }

    }

    public void importStates() {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("State Abbreviation");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType specType = ((DataTypeResponse)typeResponse).getDataType();


            BufferedReader br = new BufferedReader(new FileReader("States.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String name = parts[0].trim();
                String desc = "";

                if (parts.length > 1) {
                    desc = parts[1].trim();
                }

                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(specType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    request.setName(name);
                    request.setDescription(desc);

                    Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                    request.addScope(scope);
                    request.addScope(new Scope(Community.Global, Scope.Permission.R));

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                    int y = 1;
                }

                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }

    }

    public void importRestFeatures() {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Venue Feature");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType specType = ((DataTypeResponse)typeResponse).getDataType();


            BufferedReader br = new BufferedReader(new FileReader("Special Features.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String name = parts[0].trim();
                String desc = "";

                if (parts.length > 1) {
                    desc = parts[1].trim();
                }

                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(specType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    request.setName(name);
                    request.setDescription(desc);

                    Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                    request.addScope(scope);
                    request.addScope(new Scope(Community.Global, Scope.Permission.R));

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                    int y = 1;
                }

                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }

    }

    public void importRestCategories() {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Venue Category");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType specType = ((DataTypeResponse)typeResponse).getDataType();


            BufferedReader br = new BufferedReader(new FileReader("Categories.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String name = parts[0].trim();
                String desc = "";

                if (parts.length > 1) {
                    desc = parts[1].trim();
                }

                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(specType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    request.setName(name);
                    request.setDescription(desc);

                    Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                    request.addScope(scope);
                    request.addScope(new Scope(Community.Global, Scope.Permission.R));

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                    int y = 1;
                }

                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }

    }

    public void importAtmospheres() {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Venue Atmosphere");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType specType = ((DataTypeResponse)typeResponse).getDataType();


            BufferedReader br = new BufferedReader(new FileReader("Atmospheres.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String name = parts[0].trim();

                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(specType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    request.setName(name);

                    Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                    request.addScope(scope);
                    request.addScope(new Scope(Community.Global, Scope.Permission.R));

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                    int y = 1;
                }

                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }

    }
     
    public void importSpecialisation()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Specialisation");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType specType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Specializations.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null) 
            {
                String[] parts = thisLine.split("\t");
                
                String name = parts[0].trim();
                
                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(specType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    request.setName(name);

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                }
                
                int x = 1;
            } 

        }
        catch (Exception e)
        {
            int x = 1;
        }
    }
    
    public void importClasses()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Class Section");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType classSectionType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Classes.txt"));
            String thisLine = br.readLine();
            
            while ((thisLine = br.readLine()) != null) 
            {
                String[] parts = thisLine.split("\t");

                String course = parts[0]; // Course *
                String classId = parts[1]; // name
                String status = parts[2]; // Status *
                String section = parts[3]; // Section
                String syllabus = parts[4]; // Syllabus
                String term = parts[5]; // Term *
                String credits = parts[6]; // Credits
                String days = parts[7]; // Days
                String times = parts[8]; // Times
                String dates = parts[9]; // Dates
                String inst1 = parts[10]; // Instructor *
                String inst2 = parts[11]; // Instructor *
                String inst3 = parts[12]; // Instructor *
                String room = parts[13]; // Room *
                String comments = null; // Notes
                if (parts.length == 15)
                {
                    comments = parts[14];
                }
                
                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setUser(me);
                request.addType(classSectionType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);
                request.setName(classId.trim());
                
                if (section.trim().length() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Section"), section.trim());
                }
                
                if (syllabus.trim().length() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Syllabus"), syllabus.trim());
                }
                
                
                if (credits.trim().length() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Credits"), credits.trim());
                }
                
                
                if (days.trim().length() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Days"), days.trim());
                }
                
                
                if (times.trim().length() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Times"), times.trim());
                }
                
                
                if (dates.trim().length() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Dates"), dates.trim());
                }
                
                
                if (comments != null)
                {
                    if (comments.trim().length() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Notes"), comments.trim());
                    }
                }
                
                // get the Course
                DataInstanceRequest req2 = new DataInstanceRequest();
                req2.setDataShapeName("Course");
                req2.addQueryParameter("Course ID", course.trim());
                req2.setUser(me);
                Message resp2 = client.execute(req2, new DataInstanceResponseHandler());
                DataInstanceResponse resp = (DataInstanceResponse)resp2;
                List<DataInstance> instances = resp.getDataInstances();
                if (instances.size() > 0)
                {
                    request.addFieldData(classSectionType, classSectionType.getField("Course"), instances.get(0));
                }
                
                // get the Status
                if (status.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("Class Status");
                    req2.addQueryParameter("name", status.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Status"), instances.get(0));
                    }
                }
                
                // get the Term
                if (term.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("School Term");
                    req2.addQueryParameter("name", term.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Term"), instances.get(0));
                    }
                }
                
                // get the Instrcutors
                if (inst1.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("Instructor");
                    req2.addQueryParameter("name", inst1.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Instructor"), instances.get(0));
                    }
                }

                if (inst2.trim().length() > 0)
                {
                    req2.setUser(me);
                    req2 = new DataInstanceRequest();
                    req2.setDataShapeName("Instructor");
                    req2.addQueryParameter("name", inst2.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Instructor"), instances.get(0));
                    }
                }

                if (inst3.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("Instructor");
                    req2.addQueryParameter("name", inst3.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Instructor"), instances.get(0));
                    }
                }
                
                // get the Room
                if (room.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("Room");
                    req2.addQueryParameter("name", room.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(classSectionType, classSectionType.getField("Room"), instances.get(0));
                    }
                }
                
                Message msg = client.execute(request, new EditInstanceResponseHandler());
                int x = 1;
            } 
        }
        catch (Exception e)
        {
            int x = 1;
        }
    }
    
    public void importEvaluations()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Course Evaluation");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType evaluationType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Evaluations.txt"));
            String thisLine = br.readLine();
            
            while ((thisLine = br.readLine()) != null) 
            {
                String[] parts = thisLine.split("\t");

                String classId = parts[0];
                String term = parts[1]; 
                String eval = parts[2];
                String instr = parts[3];
                
                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setUser(me);
                request.addType(evaluationType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);

                if (eval.trim().length() > 0)
                {
                    request.addFieldData(evaluationType, evaluationType.getField("Evaluation"), eval.trim());
                }
                
                // get the Class Section
                DataInstanceRequest req2 = new DataInstanceRequest();
                req2.setDataShapeName("Class Section");
                req2.addQueryParameter("name", classId.trim());
                req2.setUser(me);
                req2.setDepth(Depth.Deep);
                Message resp2 = client.execute(req2, new DataInstanceResponseHandler());
                DataInstanceResponse resp = (DataInstanceResponse)resp2;
                List<DataInstance> instances = resp.getDataInstances();
                if (instances.size() > 0)
                {
                    DataInstance section = instances.get(0);
                    
                    request.addFieldData(evaluationType, evaluationType.getField("Class Section"), section);
                    
                    DataInstanceRequest req9 = new DataInstanceRequest();
                    req9.setIds(section.getId());
                    req9.setUser(me);
                    req9.setDepth(Depth.Deep);
                    Message resp9 = client.execute(req9, new DataInstanceResponseHandler());
                    DataInstanceResponse r9 = (DataInstanceResponse)resp9;
                    section = r9.getDataInstances().get(0);
                    
                    DataType t = section.getTypes().get(0);
                    DataField field = t.getField("Course");
                    
                    List<DataFieldValue> fieldVals = section.getFieldValues(t, field);
                    if (fieldVals.size() > 0)
                    {
                        DataFieldValue fieldValue = fieldVals.get(0);

                        long typeId = fieldValue.getTypeId();
                        long refId = fieldValue.getReferenceId();

                        DataInstanceRequest req3 = new DataInstanceRequest();
                        req3.setIds(refId);
                        req3.setUser(me);
                        req3.setDepth(Depth.Deep);
                        Message resp3 = client.execute(req3, new DataInstanceResponseHandler());
                        DataInstanceResponse r3 = (DataInstanceResponse)resp3;
                        List<DataInstance> courses = r3.getDataInstances();
                        if (courses.size() > 0)
                        {
                            request.addFieldData(evaluationType, evaluationType.getField("Course"), courses.get(0));

                            request.setName(courses.get(0).getName());
                        }
                    }
                }
                
                // get the Term
                if (term.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("School Term");
                    req2.addQueryParameter("name", term.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(evaluationType, evaluationType.getField("Term"), instances.get(0));
                    }
                }
                
                // get the Instrcutor
                if (instr.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("Instructor");
                    req2.addQueryParameter("name", instr.trim());
                    resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    resp = (DataInstanceResponse)resp2;
                    instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(evaluationType, evaluationType.getField("Instructor"), instances.get(0));
                    }
                }

                Message msg = client.execute(request, new EditInstanceResponseHandler());
                int x = 1;
            } 
        }
        catch (Exception e)
        {
            int x = 1;
        }
    }

    public void importClassStatus()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Course");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType courseType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Courses.txt"));
            String thisLine = br.readLine();
            

            while ((thisLine = br.readLine()) != null) 
            {
                String[] parts = thisLine.split("\t");
                
                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setUser(me);
                request.addType(courseType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);
                request.setName(parts[2].trim());
                request.addFieldData(courseType, courseType.getField("Course ID"), parts[0].trim());
                request.addFieldData(courseType, courseType.getField("Subject Area"), parts[1].trim());
                
                if (parts.length > 3)
                {
                    request.addFieldData(courseType, courseType.getField("Description"), parts[3].trim());

                    for (int i = 6; i <= 10; i++)
                    {
                        if (parts.length > i)
                        {
                            String thePart = parts[i].trim();
                            if (thePart != null && thePart.length() > 0)
                            {
                                DataInstanceRequest req2 = new DataInstanceRequest();
                                req2.setDataShapeName("Specialisation");
                                req2.addQueryParameter("name", thePart);
                                req2.setUser(me);
                                Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
                                DataInstanceResponse resp = (DataInstanceResponse)instanceResponse;
                                List<DataInstance> instances = resp.getDataInstances();
                                DataInstance specialisation = null;
                                if (instances.size() > 0)
                                {
                                    specialisation = instances.get(0);
                                    request.addFieldData(courseType, courseType.getField("Specialisation"), specialisation);
                                }
                            }
                        }
                    }

                }
                
                //Message response = client.execute(request, new EditInstanceResponseHandler());
                int x = 1;
            } 

        }
        catch (Exception e)
        {
            int x = 1;
        }
    }

    // Input file: Sponsors.txt
    //Contains a single column of names of Committee Sponsors
    // Names consist of any combination of letters, commas and periods
    public void importSponsors()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Sponsor");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType sponsorType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Sponsors.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String name = parts[0].trim();

                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(sponsorType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);

                    Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                    request.addScope(scope);
                    request.addScope(new Scope(Community.Global, Scope.Permission.R));

                    request.setName(name);
                    request.setDescription("");

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                }

                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }
    }

    // Input file: Committees.txt
    //Contains a single column of names and committees that are affiliated with PAC Leadership entities
    // Names consist of any combination of letters, commas and periods
    public void importCommittees()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Committee");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType committeeType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Committees.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String name = parts[0].trim();

                if (name.length() > 0)
                {
                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setUser(me);
                    request.addType(committeeType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);

                    Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                    request.addScope(scope);
                    request.addScope(new Scope(Community.Global, Scope.Permission.R));

                    request.setName(name);
                    request.setDescription("");

                    Message response = client.execute(request, new EditInstanceResponseHandler());
                }

                int x = 1;
            }

        }
        catch (Exception e)
        {
            int x = 1;
        }
    }


    // Input file: PacList.txt
    public void importPacList()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());

            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();

                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Leadership Pac");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType PacType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("PacList.txt"));
            String thisLine = br.readLine();

            int goodCnt = 0;

            while ((thisLine = br.readLine()) != null)
            {
                String[] parts = thisLine.split("\t");

                String pacname = parts[0]; // name
                String committeeId = parts[1]; // Committee ID
                String disclosure = parts[2]; // Disclosure Filings
                String sponsor = parts[3]; // Sponsor*
                String affcommittee = parts[4]; // Affiliated Committee*
                String receipts = parts[5]; // Receipts
                String disbursements = parts[6]; // Disbursements
                String cash = parts[7]; // Latest Cash on Hand

                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setUser(me);
                request.addType(PacType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);

                Scope scope = new Scope(new Community(2148), Scope.Permission.RUC);
                request.addScope(scope);
                request.addScope(new Scope(Community.Global, Scope.Permission.R));

                request.setName(pacname.trim());
                request.setDescription("");

                if (committeeId.trim().length() > 0)
                {
                    request.addFieldData(PacType, PacType.getField("Committee ID"), committeeId.trim());
                }

                if (disclosure.trim().length() > 0)
                {
                    request.addFieldData(PacType, PacType.getField("Disclosure Filings"), disclosure.trim());
                }

                boolean retry = (receipts.indexOf(",") != -1) ||
                        (disbursements.indexOf(",") != -1) || (cash.indexOf(",") != -1);

                if (receipts.trim().length() > 0)
                {
                    receipts = receipts.replaceAll(",", "");
                    request.addFieldData(PacType, PacType.getField("Receipts"), receipts.trim().substring(1));
                }


                if (disbursements.trim().length() > 0)
                {
                    disbursements = disbursements.replaceAll(",", "");
                    request.addFieldData(PacType, PacType.getField("Disbursements"), disbursements.trim().substring(1));
                }


                if (cash.trim().length() > 0)
                {
                    cash = cash.replaceAll(",", "");
                    request.addFieldData(PacType, PacType.getField("Latest Cash on Hand"), cash.trim().substring(1));
                }



                // get the Sponsor
                DataInstanceRequest req2 = new DataInstanceRequest();
                if (sponsor.trim().length() > 0) {
                    req2.setDataShapeName("Sponsor");
                    req2.addQueryParameter("name", sponsor.trim());
                    req2.setUser(me);
                    Message resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    DataInstanceResponse resp = (DataInstanceResponse)resp2;
                    List<DataInstance> instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(PacType, PacType.getField("Sponsor"), instances.get(0));
                    }
                }

                // get the Affiliated Committee
                if (affcommittee.trim().length() > 0)
                {
                    req2 = new DataInstanceRequest();
                    req2.setUser(me);
                    req2.setDataShapeName("Committee");
                    req2.addQueryParameter("name", affcommittee.trim());
                    Message resp2 = client.execute(req2, new DataInstanceResponseHandler());
                    DataInstanceResponse resp = (DataInstanceResponse)resp2;
                    List<DataInstance> instances = resp.getDataInstances();
                    if (instances.size() > 0)
                    {
                        request.addFieldData(PacType, PacType.getField("Affiliated Committee"), instances.get(0));
                    }
                }

                if (retry) {
                    Message msg = client.execute(request, new EditInstanceResponseHandler());
                    int x2 = 1;
                }
                int x = 1;
            }

            int xyz = 1;
        }
        catch (Exception e)
        {
            int x = 1;
        }
    }



    
    public void crap()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Course");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType courseType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Courses.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null) 
            {
                String[] parts = thisLine.split("\t");
                String courseId = parts[0].trim();
                DataInstanceRequest req3 = new DataInstanceRequest();
                req3.setDataShapeName("Course");
                req3.addQueryParameter("Course ID", courseId);
                req3.setUser(me);
                Message instanceResponse = client.execute(req3, new DataInstanceResponseHandler());
                DataInstanceResponse resp = (DataInstanceResponse)instanceResponse;
                List<DataInstance> instances = resp.getDataInstances();
                DataInstance course = null;
                if (instances.size() > 0)
                {
                    course = instances.get(0);
                }

                if (course != null)
                {
                    if (parts.length > 4)
                    {
                        EditDataInstanceRequest request = new EditDataInstanceRequest();
                        request.setUser(me);
                        request.addType(courseType);
                        request.setOperation(EditDataInstanceRequest.Operation.AddFieldData);
                        request.setDataInstance(course);

                        boolean added = false;
                        
                        String preReq = parts[4].trim();
                        if (preReq.length() > 0)
                        {
                            DataInstanceRequest req2 = new DataInstanceRequest();
                            req2.setDataShapeName("Course");
                            req2.addQueryParameter("Course ID", preReq);

                            req2.setUser(me);
                            instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
                            resp = (DataInstanceResponse)instanceResponse;
                            instances = resp.getDataInstances();
                            DataInstance pr = null;
                            if (instances.size() > 0)
                            {
                                pr = instances.get(0);
                                request.addFieldData(courseType, courseType.getField("Prerequisite Course"), pr);
                                added = true;
                            }
                        }

                        String equiv = parts[5].trim();

                        if (equiv.length() > 0)
                        {
                            DataInstanceRequest req2 = new DataInstanceRequest();
                            req2.setDataShapeName("Course");
                            req2.addQueryParameter("Course ID", equiv);
                            req2.setUser(me);
                            instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
                            resp = (DataInstanceResponse)instanceResponse;
                            instances = resp.getDataInstances();
                            DataInstance pr = null;
                            if (instances.size() > 0)
                            {
                                pr = instances.get(0);
                                request.addFieldData(courseType, courseType.getField("Equivalent Course"), pr);
                                added = true;
                            }
                        }

                        if (added)
                        {
                            Message response = client.execute(request, new EditInstanceResponseHandler());
                            int x = 1;
                        }
                    }
                }
                
                int x = 1;
            } 

        }
        catch (Exception e)
        {
            int x = 1;
        }
    }
    
    public void importTerms()
    {
        try
        {
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("School Term");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType courseType = ((DataTypeResponse)typeResponse).getDataType();

            BufferedReader br = new BufferedReader(new FileReader("Terms.txt"));
            String thisLine = br.readLine();
            while ((thisLine = br.readLine()) != null) 
            {
                String[] parts = thisLine.split("\t");
                String name = parts[0].trim();
                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setUser(me);
                request.addType(courseType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);
                request.setName(name);
                Message response = client.execute(request, new EditInstanceResponseHandler());
                int x = 1;
            } 

        }
        catch (Exception e)
        {
            int x = 1;
        }
    }

    public void buildNews()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }
        
            DataTypeRequest req = new DataTypeRequest();
            req.setName("News");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType newsType = ((DataTypeResponse)typeResponse).getDataType();

            EditDataInstanceRequest request = new EditDataInstanceRequest();
            request.setUser(me);
            request.addType(newsType);
            request.setOperation(EditDataInstanceRequest.Operation.Create);
            request.setName("Welcome");
            request.addFieldData(newsType, newsType.getField("Summary"), "This is the general welcome statement.");
            
            StringBuffer buf = new StringBuffer();
            buf.append("<span>");
            buf.append("Welcome to <b>EndSlice</b>.  This is the general welcome story.  It's used to provide the initial ");
            buf.append("<i>hello</i> to users finding themselves at the Home Page.  A basic introduction, as well as any other ");
            buf.append("information deemed appropriate by the site administrator should be included in this story.");
            buf.append("</span>");
            request.addFieldData(newsType, newsType.getField("Content"), buf.toString());
            
            Message response = client.execute(request, new EditInstanceResponseHandler());

            request = new EditDataInstanceRequest();
            request.setUser(me);
            request.addType(newsType);
            request.setOperation(EditDataInstanceRequest.Operation.Create);
            request.setName("User Welcome");
            request.addFieldData(newsType, newsType.getField("Summary"), "This is the additional welcome statement for logged in users.");
            
            buf = new StringBuffer();
            buf.append("<span>");
            buf.append("This is the story that contains some additional welcome stuff for logged in users.  ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("It can contain pretty much anything. ");
            buf.append("</span>");
            request.addFieldData(newsType, newsType.getField("Content"), buf.toString());
            
            response = client.execute(request, new EditInstanceResponseHandler());
    }
    
    public void createDataType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Dummy Stuff");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("dummy data description goes here.");
        //req.addFieldDefinition("Summary", "Summary of the news.", "Text", true);
        //req.addFieldDefinition("Content", "The story content", "Text", false);

        Message response = client.execute(req, new EditTypeResponseHandler());
        int x = 1;
    }

    public void createDataLicenseType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Data License");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("A license that covers the use of data.");
        req.addFieldDefinition("Content", "The license content", "Text");

        Message response = client.execute(req, new EditTypeResponseHandler());
        int x = 1;
    }

    public void createImageType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Image");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Image Content", "Favorite Named Search Collections", "Search Collection");

        Message response = client.execute(req, new EditTypeResponseHandler());
        int x = 1;
    }

    public void joinCommunities() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        DataInstanceRequest req2 = new DataInstanceRequest();
        req2.setDataShapeName("Community");
        req2.addQueryParameter("name", "Chime Demo");
        req2.setUser(me);
        Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
        DataInstanceResponse resp = (DataInstanceResponse)instanceResponse;
        List<DataInstance> instances = resp.getDataInstances();
        DataInstance community = null;
        if (instances.size() > 0)
        {
            community = instances.get(0);
        }

        DataInstanceRequest req3 = new DataInstanceRequest();
        req3.setUser(me);
        req3.setDepth(Depth.Deep);
        req3.setIds(community.getId());
        instanceResponse = client.execute(req3, new DataInstanceResponseHandler());

        DataTypeRequest req = new DataTypeRequest();
        req.setName("Community");
        Message typeResponse = client.execute(req, new DataTypeResponseHandler());
        DataType type = ((DataTypeResponse)typeResponse).getDataType();

        EditDataInstanceRequest request = new EditDataInstanceRequest();
        request.setDataInstance(me);
        request.addFieldData(me.getTypes().get(0), me.getTypes().get(0).getField("Community"), community);
        request.setUser(me);
        request.setOperation(EditDataInstanceRequest.Operation.ModifyFieldData);
        request.addType(type);
        Message response = client.execute(request, new EditInstanceResponseHandler());
        int x = 1;
    }

    public void createCommunities() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        DataTypeRequest req = new DataTypeRequest();
        req.setName("Community");
        Message typeResponse = client.execute(req, new DataTypeResponseHandler());
        DataType type = ((DataTypeResponse)typeResponse).getDataType();
        
        EditDataInstanceRequest request = new EditDataInstanceRequest();
        request.setUser(me);
        request.addType(type);
        request.setOperation(EditDataInstanceRequest.Operation.Create);
        request.setName("Software Lovers");
        Message msg = client.execute(request, new EditInstanceResponseHandler());

        request = new EditDataInstanceRequest();
        request.setUser(me);
        request.addType(type);
        request.setOperation(EditDataInstanceRequest.Operation.Create);
        request.setName("Stern Stuff");
        msg = client.execute(request, new EditInstanceResponseHandler());
        int x = 1;
    }

    public void addUserField() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("User");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Search Collections", "Favorite Named Search Collections", "Search Collection");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void updateField() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Search Collection");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Searches", "Named Searches", "Named Search");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void addImageGalleryField() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Project Notes");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("ImageGallery", "Images", "Text");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void addInvestorFields() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Investor");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Web Site", "Investor web sites", "URL");
        req.addFieldDefinition("Summary", "Summary details", "Rich Text");
        req.addFieldDefinition("Min Avg Investment", "Minumum average investment", "Number");
        req.addFieldDefinition("Max Avg Investment", "Maximum average investment", "Number");
        req.addFieldDefinition("Investor Count", "Approximate number of investors", "Number");
        req.addFieldDefinition("Contact", "Contact Information", "Text");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void addNewsSourceFields() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("philip");
        lr.setPassword("philip");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Angel Investor");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Min Avg Investment", "Minumum average investment", "Number");
        req.addFieldDefinition("Max Avg Investment", "Maximum average investment", "Number");
        req.addFieldDefinition("Investor Count", "Approximate number of investors", "Number");
        req.addFieldDefinition("Contact", "Contact Information", "Text");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void addProjectIssueFields() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Project Issue");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        //req.addFieldDefinition("Project", "The Project", "Project", true);
        //req.addFieldDefinition("Project Component", "The Project Component", "Project Component", true);
        //req.addFieldDefinition("Reported By", "The that filed the issue", "User", false);
        //req.addFieldDefinition("Type", "The issue type", "Project Issue Type", false);
        //req.addFieldDefinition("Resolution", "The resolution", "Project Issue Resolution", false);
        //req.addFieldDefinition("Status", "The status", "Project Issue Status", false);
        req.addFieldDefinition("Priority", "The priority", "Project Issue Priority");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void addProjectComponentFields() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Project Component");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Project", "The Project", "Project");
        req.addFieldDefinition("Owner", "The owner of this component", "User");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createCommunityType() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Community");
        req.setOperation(EditDataTypeRequest.Operation.AddFields);
        req.addFieldDefinition("Description", "A brief description", "Text");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createRichTextType() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Rich Text");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("Richly formatted text.");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createDiscussionType() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Discussion");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("User discussion thread.");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createSoftwarePubisherType() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Software Publisher");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("Creators and/or distributors of software products.");
        req.addFieldDefinition("General Information", "Short summary", "Text");
        req.addFieldDefinition("Web Site", "Publisher's Web Site", "URL");

        DataInstanceRequest req2 = new DataInstanceRequest();
        req2.setDataShapeName("Community");
        req2.addQueryParameter("name", "Chime Demo");
        req2.setUser(me);
        Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
        DataInstanceResponse resp = (DataInstanceResponse)instanceResponse;
        List<DataInstance> instances = resp.getDataInstances();
        DataInstance community = null;
        if (instances.size() > 0)
        {
            community = instances.get(0);
        }

        Scope scope = new Scope(new Community(community.getId()), Scope.Permission.RC);
        req.addScope(scope);

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createSoftwarePackageType() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Software Package");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("Software products, suites, drivers, applications, etc.");
        req.addFieldDefinition("Description", "Description", "Text");
        req.addFieldDefinition("Publisher", "Software Publisher", "Software Publisher");

        DataInstanceRequest req2 = new DataInstanceRequest();
        req2.setDataShapeName("Community");
        req2.addQueryParameter("name", "Chime Demo");
        req2.setUser(me);
        Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
        DataInstanceResponse resp = (DataInstanceResponse)instanceResponse;
        List<DataInstance> instances = resp.getDataInstances();
        DataInstance community = null;
        if (instances.size() > 0)
        {
            community = instances.get(0);
        }

        Scope scope = new Scope(new Community(community.getId()), Scope.Permission.RC);
        req.addScope(scope);

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void scopeTests() {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        DataInstanceRequest req3 = new DataInstanceRequest();
        req3.setDataShapeName("DataType");
        req3.setUser(me);
        req3.addQueryParameter("name", "News");
        Message instResponse = client.execute(req3, new DataInstanceResponseHandler());
        DataInstance instance = ((DataInstanceResponse)instResponse).getDataInstances().get(0);

        DataInstanceRequest req2 = new DataInstanceRequest();
        req2.setIds(instance.getId());
        req2.setUser(me);
        req2.setDepth(Depth.Deep);
        instResponse = client.execute(req2, new DataInstanceResponseHandler());
        instance = ((DataInstanceResponse)instResponse).getDataInstances().get(0);

        List<Scope> scopes = instance.getSocialContext().getScopes();
        List<Community> communities = me.getCommunities();
        communities.add(Community.Global);
        //communities.add(new Community(me.getId()));

        List<Community> results = new ArrayList<Community>();
        Community justMe = new Community(me.getId());
        justMe.setName("Just Me");
        results.add(justMe);

        List<Scope> typeScopes = scopes;


        for (Community comm : communities) {
            if (isMatch(comm, scopes)) {
                    Community c = new Community(comm.getId());
                    if (c.getId() == c.Global.getId()) {
                        c.setName(comm.getName());
                    } else {
                        c.setName("Members of " + comm.getName());
                    }

                    results.add(c);
            }
        }

        int x = 1;

    }

    public boolean isMatch(Community community, List<Scope> scopes) {
        boolean isMember = false;
        for (Scope scope : scopes) {
            if (scope.isGlobalCommunity()) {
                isMember = true;
                break;
            } else if (scope.getCommunity().getId() == community.getId()) {
                isMember = true;
                break;
            }
        }

        return isMember;
    }

    public void createNewsType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("News4");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("News and general information.");
        req.addFieldDefinition("Summary", "Summary of the news.", "Text");
        req.addFieldDefinition("Content", "The story content", "Text");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createSearchCollectionType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Search Collection");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("A collection of named searches.");
        req.addFieldDefinition("Description", "Description of this collection.", "Text");
        req.addFieldDefinition("Searches", "The named searches", "Named Search");

        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createNamedSearchType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }
        
        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Named Search");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("Search that can be executed without the need to re-enter the criteria.");
        req.addFieldDefinition("Description", "Description of the search.", "Text");
        req.addFieldDefinition("Data Type", "The Data Type to be searched.", "DataType");
        req.addFieldDefinition("Search Criteria", "The search criteria", "Text");
        
        Message response = client.execute(req, new EditTypeResponseHandler());
    }
    
    public void createPortalTemplate()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }
        
        DataTypeRequest req = new DataTypeRequest();
        req.setName("Portal Page");
        Message typeResponse = client.execute(req, new DataTypeResponseHandler());
        DataType templateType = ((DataTypeResponse)typeResponse).getDataType();

        EditPortalTemplateRequest request = new EditPortalTemplateRequest();
        request.setUser(me);
        request.addType(templateType);
        request.setOperation(EditDataInstanceRequest.Operation.Create);
        request.setName("Endslice Home Page");

        PortalTemplate spec = new PortalTemplate();
        PortalColumn col = new PortalColumn(0.5);
        
        // the general welcome news story
        PortletSpecification pspec = new PortletSpecification(PortletSpecification.PortletType.DataInstance, 1);
        pspec.setPinned(true);
        pspec.setShowHeader(false);
        pspec.setProperty("typeId", 200);
        pspec.setProperty("instanceId", 128543);
        pspec.setProperty("fieldName", "Content");
        col.add(pspec);
        
        // the additional story for logged in users
        pspec = new PortletSpecification(PortletSpecification.PortletType.DataInstance, 2);
        pspec.setPinned(true);
        pspec.setShowHeader(false);
        pspec.setProperty("typeId", 200);
        pspec.setProperty("instanceId", 128549);
        pspec.setProperty("fieldName", "Content");
        col.add(pspec);
        
        spec.add(col);
        
        col = new PortalColumn(0.5);
        
        // a named search
        pspec = new PortletSpecification(PortletSpecification.PortletType.NamedSearch, 3);
        pspec.setPinned(false);
        pspec.setShowHeader(true);
        pspec.setProperty("typeId", 128408);
        pspec.setProperty("instanceId", 128425);
        pspec.setProperty("height", 400);
        col.add(pspec);
        
        // a showcased instance
        pspec = new PortletSpecification(PortletSpecification.PortletType.DataInstance, 4);
        pspec.setPinned(false);
        pspec.setShowHeader(true);
        pspec.setProperty("typeId", 41);
        pspec.setProperty("instanceId", 1144);
        pspec.setProperty("fieldName", "Description");
        col.add(pspec);
        
        // another showcased instance
        pspec = new PortletSpecification(PortletSpecification.PortletType.DataInstance, 5);
        pspec.setPinned(false);
        pspec.setShowHeader(true);
        pspec.setProperty("typeId", 41);
        pspec.setProperty("instanceId", 1145);
        pspec.setProperty("fieldName", "Description");
        col.add(pspec);
        
        spec.add(col);
        
        request.setPortalSpecification(spec);
        
        Message response = client.execute(request, new EditInstanceResponseHandler());
        
        int x = 1;
    }
    
    public void createPortalPageType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("system");
        lr.setPassword("xyz123");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }
        
        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Portal Page");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("Defines the layout and content of a portal page.");
        req.addFieldDefinition("Description", "Description of the page.", "Text");
        req.addFieldDefinition("Template", "The page template.", "Text");
        
        Message response = client.execute(req, new EditTypeResponseHandler());
    }

    public void createEvaluationType()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }
        
        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Course Evaluation");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("An evaluation of a course offered during a specific term.");
        req.addFieldDefinition("Course", "The Course", "Course");
        req.addFieldDefinition("Class Section", "The class section", "Class Section");
        req.addFieldDefinition("Term", "The term when the course is/was offered", "School Term");
        req.addFieldDefinition("Evaluation", "The course evaluation", "URL");
        req.addFieldDefinition("Instructor", "The instructor teaching the class", "Instructor");
        
        Message response = client.execute(req, new EditTypeResponseHandler());
    }
    
    public void createSternDataTypes()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }
        
        EditDataTypeRequest req = new EditDataTypeRequest();
        req.setUser(me);
        req.setName("Class Section");
        req.setOperation(EditDataTypeRequest.Operation.Create);
        req.setDescription("A course offered during a specific term.");
        req.addFieldDefinition("Course", "The Course", "Course");
        req.addFieldDefinition("Status", "The enrollment status", "Class Status");
        req.addFieldDefinition("Section", "The class section", "Text");
        req.addFieldDefinition("Syllabus", "The course syllabus", "URL");
        req.addFieldDefinition("Term", "The term when the course is/was offered", "School Term");
        req.addFieldDefinition("Credits", "The number of credits", "Number");
        req.addFieldDefinition("Days", "The days the class meets", "Text");
        req.addFieldDefinition("Times", "The times the class meets", "Text");
        req.addFieldDefinition("Dates", "The range of dates the class meets", "Text");
        req.addFieldDefinition("Instructor", "The instructor teaching the class", "Instructor");
        req.addFieldDefinition("Room", "The room where the class meets", "Room");
        req.addFieldDefinition("Notes", "Additional notes about the class", "Text");
        
        Message response = client.execute(req, new EditTypeResponseHandler());
        
        
    }
    
    public void executeBlues()
    {
        LoginRequest lr = new LoginRequest();
        lr.setUserName("rob");
        lr.setPassword("rob");
        ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
        Message loginResponse = client.execute(lr, new LoginResponseHandler());

        User me = null;
        if (loginResponse instanceof LoginResponse)
        {
            me = ((LoginResponse)loginResponse).getUser();

            System.out.println("");
            System.out.println("Logged in as " + me.getName());
            System.out.println("");
        }

        DataTypeRequest req = new DataTypeRequest();
        req.setName("Album");
        Message typeResponse = client.execute(req, new DataTypeResponseHandler());
        DataType albumType = ((DataTypeResponse)typeResponse).getDataType();
        
        File f = new File(".");
        String[] files = f.list();
        for (String fileName : files)
        {
            try
            {
                File file = new File(fileName);
                FileInputStream fis = new FileInputStream(file);
                Properties p = new Properties();
                p.load(fis);
                fis.close();

                String temp = p.getProperty("DTITLE");
                String artist = "";
                String title = "";
                
                int idx = temp.indexOf("/");
                if (idx == -1)
                {
                    artist = temp.trim();
                    title = artist;
                }
                else
                {
                    artist = temp.substring(0, idx).trim();
                    title = temp.substring(idx + 1).trim();
                }
                
                String year = p.getProperty("DYEAR", "0");
                String sub = p.getProperty("DGENRE", "");
                
                EditDataInstanceRequest request = new EditDataInstanceRequest();
                request.setName(title);
                request.addFieldData(albumType, albumType.getField("Artist"), artist);
                //request.addFieldData(albumType.getField("Year"), year);
                request.addFieldData(albumType, albumType.getField("Genre"), "Blues");
                request.addFieldData(albumType, albumType.getField("Sub Genre"), sub);
                
                int i = 0;
                while (true)
                {
                    String t = "TTITLE" + i;
                    if (p.containsKey(t))
                    {
                        String track = p.getProperty(t);
                        request.addFieldData(albumType, albumType.getField("Tracks"), track);
                    }
                    else
                    {
                        break;
                    }
                    
                    i++;
                }
                
                request.setUser(me);
                request.addType(albumType);
                request.setOperation(EditDataInstanceRequest.Operation.Create);
                Message response = client.execute(request, new EditInstanceResponseHandler());
                //EditDataInstanceResponse resp = (EditDataInstanceResponse)response;
                //DataInstance album = resp.getDataInstance();
                
                int x = 1;
            }
            catch (Exception e)
            {
                System.out.println(e);
            }
        }
    }
    
    public void executePublishers()
    {
        try
        {
            StringBuffer buffer = new StringBuffer();
            FileReader reader = new FileReader("publishers.txt");
            char[] charBuffer = new char[4096];
            while (true)
            {
                int cnt = reader.read(charBuffer);
                if (cnt < 1)
                {
                    break;
                }
                
                String s = new String(charBuffer, 0, cnt);
                buffer.append(s);
            }
            
            reader.close();
            
            String jsonText = buffer.toString();
            JSONParser parser = JSONParser.create(jsonText);
            JSONObject json = parser.parse();
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Software Publisher");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType publisherType = ((DataTypeResponse)typeResponse).getDataType();

            List<Community> communities = me.getCommunities();
            List<Scope> scopes = new ArrayList<Scope>();
            for (Community community : communities) {
                Scope scope = new Scope(community, Scope.Permission.R);
                scopes.add(scope);
            }

            JSONArray entities = json.getJSONArray("ITEMS");
            int cnt = entities.length();
            for (int i = 0; i < cnt; i++)
            {
                //if (i == 2284)
                {
                    JSONObject jsonSoftware = entities.getJSONObject(i);
                    String name = jsonSoftware.getString("name");
                    String description = jsonSoftware.getString("description");
                    String url = jsonSoftware.getString("url");

                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setName(name);
                    request.addFieldData(publisherType, publisherType.getField("General Information"), description);
                    request.addFieldData(publisherType, publisherType.getField("Web Site"), url);
                    request.setUser(me);
                    request.addType(publisherType);

                    for (Scope scope : scopes) {
                        request.addScope(scope);
                    }

                    request.addScope(new Scope(new Community(me.getId()), Scope.Permission.RU));

                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    Message response = client.execute(request, new EditInstanceResponseHandler());
                    EditDataInstanceResponse resp = (EditDataInstanceResponse)response;
                    DataInstance publisher = resp.getDataInstance();

                    JSONArray tagArray = jsonSoftware.getJSONArray("tags");
                    int tagCount = tagArray.length();
                    if (tagCount > 0)
                    {
                        ApplyTagRequest at = new ApplyTagRequest();
                        at.setApplyType(ApplyType.Add);
                        for (int j = 0; j < tagCount; j++)
                        {
                            JSONObject tag = tagArray.getJSONObject(j);
                            String tagName = tag.getString("name");
                            //at.addTag(tagName);
                        }

                        at.setUser(me);
                        at.setData(publisher);
                        Message instanceResponse = client.execute(at, new ApplyTagResponseHandler());
                        publisher = ((ApplyTagResponse)instanceResponse).getDataInstance();
                    }

                    int x = 1;
                }
            }
            
            int x = 1;
        }
        catch (Exception e)
        {
            int x = 1;
        }
    }
    
    public void execute()
    {
        try
        {
            StringBuffer buffer = new StringBuffer();
            FileReader reader = new FileReader("software.txt");
            char[] charBuffer = new char[4096];
            while (true)
            {
                int cnt = reader.read(charBuffer);
                if (cnt < 1)
                {
                    break;
                }
                
                String s = new String(charBuffer, 0, cnt);
                buffer.append(s);
            }
            
            reader.close();
            
            String jsonText = buffer.toString();
            JSONParser parser = JSONParser.create(jsonText);
            JSONObject json = parser.parse();
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");
            }
            
            List<Community> communities = me.getCommunities();
            List<Scope> scopes = new ArrayList<Scope>();
            for (Community community : communities) {
                Scope scope = new Scope(community, Scope.Permission.R);
                scopes.add(scope);
            }

            DataTypeRequest req = new DataTypeRequest();
            req.setName("Software Publisher");
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType publisherType = ((DataTypeResponse)typeResponse).getDataType();

            req.setName("Software Package");
            typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType softwareType = ((DataTypeResponse)typeResponse).getDataType();

            JSONArray entities = json.getJSONArray("ITEMS");
            int cnt = entities.length();
            for (int i = 0; i < cnt; i++)
            {
                //if (i == 2284)
                {
                    JSONObject jsonSoftware = entities.getJSONObject(i);
                    String name = jsonSoftware.getString("application");
                    String description = jsonSoftware.getString("description");

                    JSONObject jsonPub = jsonSoftware.getJSONObject("publisher");
                    String pubName = jsonPub.getString("name");

                    DataInstanceRequest req2 = new DataInstanceRequest();
                    req2.setDataShapeName("Software Publisher");
                    req2.addQueryParameter("name", pubName);
                    req2.setUser(me);
                    Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
                    DataInstanceResponse resp = (DataInstanceResponse)instanceResponse;
                    List<DataInstance> instances = resp.getDataInstances();
                    DataInstance publisher = null;
                    if (instances.size() > 0)
                    {
                        publisher = instances.get(0);
                    }

                    EditDataInstanceRequest request = new EditDataInstanceRequest();
                    request.setName(name);
                    request.addFieldData(softwareType, softwareType.getField("Description"), description);
                    
                    if (publisher != null)
                    {
                        request.addFieldData(softwareType, softwareType.getField("Publisher"), publisher);
                    }
                    
                    for (Scope scope : scopes) {
                        request.addScope(scope);
                    }

                    request.addScope(new Scope(new Community(me.getId()), Scope.Permission.RU));

                    request.setUser(me);
                    request.addType(softwareType);
                    request.setOperation(EditDataInstanceRequest.Operation.Create);
                    Message response = client.execute(request, new EditInstanceResponseHandler());
                    EditDataInstanceResponse resp2 = (EditDataInstanceResponse)response;
                    DataInstance software = resp2.getDataInstance();

                    JSONArray tagArray = jsonSoftware.getJSONArray("tags");
                    int tagCount = tagArray.length();
                    if (tagCount > 0)
                    {
                        ApplyTagRequest at = new ApplyTagRequest();
                        at.setApplyType(ApplyType.Add);
                        for (int j = 0; j < tagCount; j++)
                        {
                            JSONObject tag = tagArray.getJSONObject(j);
                            String tagName = tag.getString("name");
                            //at.addTag(tagName);
                        }

                        at.setUser(me);
                        at.setData(software);
                        instanceResponse = client.execute(at, new ApplyTagResponseHandler());
                        software = ((ApplyTagResponse)instanceResponse).getDataInstance();
                    }

                    if (publisher != null)
                    {
                        request = new EditDataInstanceRequest();
                        request.setDataInstance(publisher);
                        request.addFieldData(publisherType, publisherType.getField("Software"), software);
                        request.setUser(me);
                        request.addType(publisherType);
                        request.setOperation(EditDataInstanceRequest.Operation.AddFieldData);
                        response = client.execute(request, new EditInstanceResponseHandler());
                    }
                    
                    int x = 1;
                }
            }
            
            int x = 1;
        }
        catch (Exception e)
        {
            int x = 1;
        }
    }
    
    public void execute(final String userName)
    {
        try
        {
            /*
            String type = "_DataType_schema";
            String filter = ""; //"where A.id = B.testdata_id";

            QueryExecutor qe = new QueryExecutor(_payloadType, type, filter);

            // blocking monitor to wait for async result
            final BlockingMonitor monitor = new BlockingMonitor();

            // async listener
            ResponseListener<QueryResponseMessage> listener = new ResponseListener<QueryResponseMessage>()
            {
                public void onComplete(QueryResponseMessage response)
                {
                    synchronized (_semaphore)
                    {
                        QueryRequestMessage msg = response.getRequestMessage();

                        int count = -1;
                        _responseCount++;
                        count = _responseCount;
                        System.out.println("Count is " + count);
                         
                        if (count == TOTAL)
                        {
                            long end = System.currentTimeMillis();
                            long testElapsed = end - _startTime;
                        
                            double equiv = (double)testElapsed / (double)TOTAL;
                            System.out.println("Last Query: " + " Total Elapsed: " + testElapsed + " Equivalent: " + equiv);
                            monitor.setObject(response);
                            //System.exit(0);
                        }
                    }
                }

                public void onError(ErrorMessage response) 
                {
                    ErrorMessage em = (ErrorMessage)response;
                    System.out.println(em.getMessage());
                }
            };

            if (DOREQUESTREPLY)
            {
                Message response = qe.execute(_sender, 30000);

                long end = System.currentTimeMillis();

                if (response instanceof QueryResponseMessage)
                {
                    QueryResponseMessage qrm = (QueryResponseMessage)response;
                    System.out.println("Roundtrip: " + (end - _startTime) + " msecs.  Records returned: " + qrm.getData().size());
                }
                else
                {
                    ErrorMessage em = (ErrorMessage)response;
                    System.out.println(em.getMessage());
                }
            }
            
            for (int i = 0; i < EACH; i++)
            {
                Message msg = qe.execute(_sender, listener);
            }
            */
            
            LoginRequest lr = new LoginRequest();
            lr.setUserName("rob");
            lr.setPassword("rob");
            ChimeClient client = new ChimeClient(_payloadType, _sender, 30000);
            Message loginResponse = client.execute(lr, new LoginResponseHandler());
            
            User me = null;
            if (loginResponse instanceof LoginResponse)
            {
                me = ((LoginResponse)loginResponse).getUser();
                
                System.out.println("");
                System.out.println("Logged in as " + me.getName());
                System.out.println("");


            }

            /*
            EditDataTypeRequest treq = new EditDataTypeRequest();
            treq.set
            treq.setName("Tag");
            treq.setOperation(Operation.Create);
            treq.setDescription("Chime Tag");
            Message tresp = client.execute(treq, new EditTypeResponseHandler());
            */
            
            /*
            DataTypeRequest req = new DataTypeRequest();
            req.setName("Publisher");
            
            Message typeResponse = client.execute(req, new DataTypeResponseHandler());
            DataType publisherType = ((DataTypeResponse)typeResponse).getDataShapeName();
            
            DataInstanceRequest req2 = new DataInstanceRequest();
            req2.setDataShapeName("NetbeansProject");
            req2.addQueryParameter("name", "Dummy Project");
            req2.setUser(me);
            Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());
        
            // create an instance of something
            EditDataInstanceRequest req3 = new EditDataInstanceRequest();
            req3.setName("Another Publisher");
            
            req3.addFieldData(publisherType.getField("Projects"), ((DataInstanceResponse)instanceResponse).getDataInstances());
            req3.addFieldData(publisherType.getField("Company Name"), "Parent Dummy, Inc.");
            req3.addFieldData(publisherType.getField("Employees"), new Integer(27));
            req3.addFieldData(publisherType.getField("Company Name"), "DBA Nonsense, Ltd.");
            req3.addFieldData(publisherType.getField("Company Name"), "DBA Crapola Corp.");
            req3.setUser(me);
            req3.setTypes(publisherType);
            req3.setOperation(EditDataInstanceRequest.Operation.Create);
            Message response3 = client.execute(req3, new EditInstanceResponseHandler());
            */
            DataInstanceRequest req2 = new DataInstanceRequest();
            req2.setDataShapeName("Test1");
            req2.addQueryParameter("name", "Name: 5", Operator.StartsWith);
            //req2.addQueryParameter("Project", "DesktopApplicat", Operator.StartsWith);
            req2.setUser(me);
            req2.setDepth(Depth.Shallow);
            Message instanceResponse = client.execute(req2, new DataInstanceResponseHandler());

            System.out.println("");
            if (instanceResponse instanceof DataInstanceResponse)
            {
                DataInstanceResponse dir = (DataInstanceResponse)instanceResponse;
                List<DataInstance> instances = dir.getDataInstances();

                for (DataInstance instance : instances)
                {
                    ///*
                    ApplyTagRequest at = new ApplyTagRequest();
                    at.setApplyType(ApplyType.Add);
                    //at.addTag("java");
                    //at.addTag("jms");
                    //at.addTag("framework");
                    at.setUser(me);
                    at.setData(instance);
                    instanceResponse = client.execute(at, new ApplyTagResponseHandler());
                    instance = ((ApplyTagResponse)instanceResponse).getDataInstance();
                    //*/
                    
                    /*
                    ApplyRatingRequest rr = new ApplyRatingRequest();
                    Rating r = new Rating();
                    r.setUser(me);
                    r.setValue(3);
                    r.setText("Somewhat sloppy");
                    r.setReviewText("Please clean up unused code, add comments, etc.");
                    rr.setData(instance);
                    rr.setRating(r);
                    instanceResponse = client.execute(rr, new ApplyRatingResponseHandler());
                    instance = ((ApplyRatingResponse)instanceResponse).getDataInstances();
                    */

                    /*
                    AddCommentRequest ac = new AddCommentRequest();
                    ac.setCommentType(CommentType.ReviewComment);
                    ac.setRating(instance.getSocialContext().getRatings().get(0));
                    Comment com = new Comment();
                    ac.setComment(com);
                    ac.setData(instance);
                    com.setUser(me);
                    com.setText("This is another comment about a review");
                    instanceResponse = client.execute(ac, new AddCommentResponseHandler());
                    instance = ((AddCommentResponse)instanceResponse).getDataInstances();

                    System.out.println("");
                    System.out.println("Name: " + instance.getName());
                    System.out.println("");
                    System.out.println("   Created by: " + instance.getCreatedBy().getName() + " at " + instance.getCreated());
                    System.out.println("   Updated by: " + instance.getUpdatedBy().getName() + " at " + instance.getUpdated());

                    if (req2.getDepth() == Depth.Deep)
                    {
                        if (instance.isSocialized())
                        {
                            System.out.println("");
                            System.out.println("Ratings:");
                            System.out.println("");
                            int cnt = instance.getSocialContext().getRatingCount();
                            System.out.println("   Rating Count: " + cnt);
                            if (cnt > 0)
                            {
                                System.out.println("   Average Rating: " + instance.getSocialContext().getAverageRating());
                                System.out.println("");

                                List<Rating> ratings = instance.getSocialContext().getRatings();
                                for (Rating rating : ratings)
                                {
                                    System.out.println("       Rated " + rating.getValue() + " '" + rating.getText() + "' by " + rating.getUser().getName() + " at " + rating.getTimestamp());

                                    long positive = rating.getPositive();
                                    long total = positive + rating.getNegative();
                                    if (total == 0)
                                    {
                                        System.out.println("       No Votes");
                                    }
                                    else
                                    {
                                        System.out.println("       " + positive + " of " + total + " votes were positive");
                                    }

                                    System.out.println(""); //       Review: ");
                                    List<Comment> reviews = rating.getReviews();
                                    for (Comment review : reviews)
                                    {
                                        System.out.println("       At " + review.getTimestamp());
                                        System.out.println("       " + review.getText());
                                        System.out.println("");
                                    }

                                    System.out.println("");

                                    List<Comment> comments = rating.getComments();
                                    for (Comment comment : comments)
                                    {
                                        System.out.println("          By " + comment.getUser().getName() + " at " + comment.getTimestamp());

                                        positive = comment.getPositive();
                                        total = positive + comment.getNegative();
                                        if (total == 0)
                                        {
                                            System.out.println("          No Votes");
                                        }
                                        else
                                        {
                                            System.out.println("          " + positive + " of " + total + " votes were positive");
                                        }

                                        System.out.println("          Comment: " + comment.getText());
                                        System.out.println("");
                                    }
                                }
                            }

                            System.out.println("");
                            System.out.println("Tags:");
                            System.out.println("");
                            List<TagContext> contexts = instance.getSocialContext().getUserTagContexts();
                            for (TagContext tagContext : contexts)
                            {
                                String op = "[ ]";
                                if (tagContext.isUserTagged())
                                {
                                    op = "[X]";
                                }

                                System.out.println("   " + op + " " + tagContext.getTag().getName() + "(" + tagContext.getUsageCount() + ")");
                            }

                            System.out.println("");

                        }

                        System.out.println("");
                        System.out.println("Fields:");
                        System.out.println("");
                        List<DataField> fields = instance.getTypes().getFields();
                        for (DataField field : fields)
                        {
                            String name = field.getName();
                            Object value = instance.getFieldValues(field);
                            if (value instanceof String)
                            {
                                System.out.println("   " + name + ": " + value.toString());
                            }
                            else if (value instanceof List)
                            {
                                System.out.println("   " + name + ":");
                                List list = (List)value;
                                for (Object val : list)
                                {
                                    System.out.println("         " + val.toString());
                                }
                            }
                        }

                        System.out.println("");
                        System.out.println("Comments:");
                        System.out.println("");
                        List<Comment> comments = instance.getSocialContext().getComments();
                        for (Comment comment : comments)
                        {
                            System.out.println("   By " + comment.getUser().getName() + " at " + comment.getTimestamp());
                            long positive = comment.getPositive();
                            long total = positive + comment.getNegative();
                            if (total == 0)
                            {
                                System.out.println("   No Votes");
                            }
                            else
                            {
                                System.out.println("   " + positive + " of " + total + " votes were positive");
                            }

                            System.out.println("   Comment: " + comment.getText());
                            System.out.println("");
                        }
                    }
                    */
                }
                
                System.out.println("");
                System.out.println("My Tags:");
                System.out.println("");

                UserContextRequest ucr = new UserContextRequest();
                ucr.setUser(me);
                Message ucrResponse = client.execute(ucr, new UserContextResponseHandler());
                UserContextResponse contextResponse = (UserContextResponse)ucrResponse;
                List<TagContext> contexts = contextResponse.getUserSocialContext().getUserTagContexts();
                for (TagContext tagContext : contexts)
                {
                    System.out.println("   " + tagContext.getTag().getName() + "(" + tagContext.getUsageCount() + ")");
                }

                System.out.println("");

            }
            else
            {
                ErrorMessage em = (ErrorMessage)instanceResponse;
                System.out.println("Error: " + em.getMessage());
            }
            
            int x = 1;
            // wait for response
            //QueryResponseMessage resp = (QueryResponseMessage)monitor.waitForObject();
            
            //System.out.println("Roundtrip: " + (end - start) + " msec");
            
        }
        catch (Throwable t)
        {
            int xxx = 1;
        }

        System.exit(0);
    }
}
