/* Generated By:JavaCC: Do not edit this line. JSONParser.java */
package com.paxxis.chime.json.parser;

import com.paxxis.chime.json.JSONArray;
import com.paxxis.chime.json.JSONBoolean;
import com.paxxis.chime.json.JSONDouble;
import com.paxxis.chime.json.JSONInteger;
import com.paxxis.chime.json.JSONNull;
import com.paxxis.chime.json.JSONObject;
import com.paxxis.chime.json.JSONString;
import com.paxxis.chime.json.JSONValue;
import java.io.*;
import java.util.*;

/**
* This is the parser class.  Most of the code for
* the parser is generated by the grammar definition.
*/
public class JSONParser implements JSONParserConstants {
    private static final String ESCAPEDCHARS = "brntfu/\\\"";
    private static Hashtable<Integer, String> _escapeMap = new Hashtable<Integer, String>();

    static
    {
        // NOTE:  u has no mapping.  the 4 characters that
        // follow u must be processed separately
        _escapeMap.put((int)'b', "\b");
        _escapeMap.put((int)'r', "\r");
        _escapeMap.put((int)'n', "\n");
        _escapeMap.put((int)'t', "\t");
        _escapeMap.put((int)'f', "\f");
        _escapeMap.put((int)'/', "/");
        _escapeMap.put((int)'\\', "\\");
        _escapeMap.put((int)'\"', "\"");
    }

    // we generate a static parser, so we keep
    // a singleton instance.
    protected static JSONParser _parser = null;
    protected static String _sourceCode = null;

    public static JSONParser create(String contents)
    {
        // save the most recent contents
        //_sourceCode = contents;

        // right now we only support reading from a String instance.  With
        // large data streams coming over some kind of feed it would be
        // useful to use some kind of stream reader, but for now this is fine.
        StringReader rdr = new StringReader(contents);

        /*
        if (_parser == null)
        {
            _parser = new JSONParser(rdr);
        }
        else
        {
            _parser.ReInit(rdr);
        }

        return _parser;
        */

        return new JSONParser(rdr);

    }

    public static String getSourceCode()
    {
        return _sourceCode;
    }

/**
 * Users of this parser call this method after parser
 * creation to get a fully populated JSON object from
 * the input.
 */
  final public JSONObject parse() throws ParseException {
    JSONObject object;
    // there should be a single top level json object
        object = jsonObject();
        {if (true) return object;}
    throw new Error("Missing return statement in function");
  }

/**
 * A JSON object
 */
  final public JSONObject jsonObject() throws ParseException {
    JSONObject object = new JSONObject();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEQUOTE:
      stringValuePairs(object);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
        {if (true) return object;}
    throw new Error("Missing return statement in function");
  }

  final public void stringValuePairs(JSONObject object) throws ParseException {
    stringValuePair(object);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      stringValuePair(object);
    }
  }

  final public void stringValuePair(JSONObject object) throws ParseException {
    JSONString name;
    JSONValue value;
    name = stringValue();
    jj_consume_token(VALUESEP);
    value = dataValue();
        object.set(name, value);
  }

  final public void dataValues(JSONArray array) throws ParseException {
   JSONValue value;
    value = dataValue();
        array.add(value);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      value = dataValue();
            array.add(value);
    }
  }

  final public JSONValue dataValue() throws ParseException {
    JSONValue value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEQUOTE:
    case TRUE:
    case FALSE:
    case NULL:
    case INTEGERLITERAL:
    case FLOATLITERAL:
      value = constant();
      break;
    case LBRACE:
      value = jsonObject();
      break;
    case LBRACKET:
      value = jsonArray();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public JSONNull nullValue() throws ParseException {
    jj_consume_token(NULL);
       {if (true) return new JSONNull();}
    throw new Error("Missing return statement in function");
  }

  final public JSONBoolean booleanValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
       {if (true) return new JSONBoolean(true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
       {if (true) return new JSONBoolean(false);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public JSONDouble doubleValue() throws ParseException {
    Token t;
    t = jj_consume_token(FLOATLITERAL);
       {if (true) return new JSONDouble(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public JSONInteger integerValue() throws ParseException {
    Token t;
    t = jj_consume_token(INTEGERLITERAL);
       {if (true) return new JSONInteger(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public JSONString stringValue() throws ParseException {
    String t;
    jj_consume_token(DOUBLEQUOTE);
    t = grabToCharacter('"');
       {if (true) return new JSONString(t);}
    throw new Error("Missing return statement in function");
  }

  final public JSONArray jsonArray() throws ParseException {
    JSONArray array = new JSONArray();
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEQUOTE:
    case LBRACE:
    case LBRACKET:
    case TRUE:
    case FALSE:
    case NULL:
    case INTEGERLITERAL:
    case FLOATLITERAL:
      dataValues(array);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
        {if (true) return array;}
    throw new Error("Missing return statement in function");
  }

  final public JSONValue constant() throws ParseException {
    JSONValue val;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATLITERAL:
      val = doubleValue();
      break;
    case INTEGERLITERAL:
      val = integerValue();
      break;
    case TRUE:
    case FALSE:
      val = booleanValue();
      break;
    case NULL:
      val = nullValue();
      break;
    case DOUBLEQUOTE:
      val = stringValue();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  String grabToCharacter(char grab) throws ParseException {
   StringBuffer buffer = new StringBuffer();
   SimpleCharStream s = token_source.input_stream; //JSONParserTokenManager.input_stream;

   try
   {
       char cc = s.readChar();
       while (cc != grab)
       {
          if (cc == '\\')
          {
             // get the next character too
             cc = s.readChar();
             if (isEscaped(cc))
             {
                 if (cc == 'u')
                 {
                     // the next 4 characters are a 4 digit hex number
                     char[] digits = {
                                        s.readChar(),
                                        s.readChar(),
                                        s.readChar(),
                                        s.readChar()
                                     };
                     buffer.append(getHexEscapeString(digits));
                 }
                 else
                 {
                     buffer.append(getEscapeString(cc));
                 }
             }
             else
             {
                 buffer.append("\\" + cc);
             }
          }
          else
          {
              buffer.append(cc);
          }

          cc = s.readChar();
       }
   }
   catch (java.io.IOException e)
   {
      throw new RuntimeException(e.getMessage());
   }

   return buffer.toString();
  }

  boolean isEscaped(char c) throws ParseException {
    return (-1 != ESCAPEDCHARS.indexOf((int)c));
  }

  String getEscapeString(char c) throws ParseException {
    return _escapeMap.get((int)c);
  }

  String getHexEscapeString(char[] chars) throws ParseException {
    // we can turn this one right back into a \\uXXXX
    String s = "\\u" + new String(chars).toUpperCase();

    return s;
  }

  public JSONParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4,0x200,0x200,0x15c2c,0xc00,0x15c2c,0x15c04,};
   }

  public JSONParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JSONParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public JSONParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public JSONParser(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[17];
    for (int i = 0; i < 17; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
