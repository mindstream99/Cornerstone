/* Generated By:JavaCC: Do not edit this line. CSLRuleParser.java */
/**
 * If you're going to extend the language, you'll need to generate your own parser.
 * So copy this file into your own package directory, and change the package specification
 * below to your own package.
 */
package com.paxxis.cornerstone.scripting.parser;

import java.io.*;
import java.util.*;
import com.paxxis.cornerstone.scripting.*;

/**
 * Add an import to your own scripting classes here
 */

/**
 * This is the parser class.  Most of the code for
 * the parser is generated by the grammar definition.
 *
 * If you are generating an extended parser, you should change
 * CSLRuleParser to something that make sense for your use case.
 */
public class CSLRuleParser implements RuleParser, CSLRuleParserConstants {
        private static final String DEFAULTNAME = "default";

    protected String _sourceCode = null;
    protected String ruleSetName = DEFAULTNAME;
    protected int ruleCount = 0;

    public CSLRuleParser() {
    }

    public void initialize(String contents) {
        StringReader rdr = new StringReader(contents);
            jj_input_stream = new SimpleCharStream(rdr, 1, 1);
        token_source = new CSLRuleParserTokenManager(jj_input_stream);
        token = new Token();
        this.ReInit(rdr);
        _sourceCode = contents;

                ruleSetName = DEFAULTNAME;
                ruleCount = 0;
    }

    public String getSourceCode()
    {
        return _sourceCode;
    }

  final public void parseRuleSet(RuleSet ruleSet) throws ParseException {
        Token t;
    Rule rule;
    label_1:
    while (true) {
      rule = parseRule(ruleSet);
        try
        {
            ruleSet.addRule(rule);
        }
        catch (Exception rce)
        {
            {if (true) throw new ParseException(rce.getMessage());}
        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNO_DESCRIPTION:
      case RULESET:
      case RESULT:
      case ARRAY:
      case TABLE:
      case INTEGER:
      case DOUBLE:
      case BOOLEAN:
      case STRING:
      case DATE:
      case EXTENSION:
      case name:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  final public Rule parseRule(RuleSet ruleSet) throws ParseException {
    Rule theRule = new Rule(ruleSet);
    Token t;
    boolean ruleSetDeclared = false;
          ruleCount++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULESET:
      jj_consume_token(RULESET);
      t = jj_consume_token(name);
                        ruleSetName = t.image;
                        ruleSetDeclared = true;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                if (ruleCount == 1 && !ruleSetDeclared) {
            {if (true) throw new ParseException("You must declare a ruleset before the first rule definition.");}
                }
    rule(theRule);
                {if (true) return theRule;}
    throw new Error("Missing return statement in function");
  }

  final public void rule(Rule theRule) throws ParseException {
        String desc = null;
    Token t;
    RuleVariable returnVariable = new StringVariable("#return") ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANNO_DESCRIPTION:
      jj_consume_token(ANNO_DESCRIPTION);
      desc = stringValue();
                  theRule.setDescription(desc);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESULT:
    case ARRAY:
    case TABLE:
    case INTEGER:
    case DOUBLE:
    case BOOLEAN:
    case STRING:
    case DATE:
    case EXTENSION:
      returnVariable = returnType();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
      theRule.setReturnValue(returnVariable);
    ruleName(theRule);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESULT:
    case REFERENCE:
    case ARRAY:
    case TABLE:
    case INTEGER:
    case DOUBLE:
    case BOOLEAN:
    case STRING:
    case DATE:
    case EXTENSION:
      ruleParams(theRule);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      jj_consume_token(METHODSEP);
      whenClauses(theRule);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    doClauses(theRule, theRule.getQueue());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
      jj_consume_token(ERROR);
      jj_consume_token(METHODSEP);
      doClauses(theRule, theRule.getErrorQueue());
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public RuleVariable returnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
               {if (true) return new StringVariable("#return");}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
               {if (true) return new DoubleVariable("#return");}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                {if (true) return new BooleanVariable("#return");}
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
                {if (true) return new IntegerVariable("#return");}
      break;
    case RESULT:
      jj_consume_token(RESULT);
               {if (true) return new ResultVariable("#return");}
      break;
    case DATE:
      jj_consume_token(DATE);
             {if (true) return new DateVariable("#return");}
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
              {if (true) return new Array("#return");}
      break;
    case TABLE:
      jj_consume_token(TABLE);
              {if (true) return new Table("#return");}
      break;
    case EXTENSION:
      jj_consume_token(EXTENSION);
                  {if (true) return new Extension("#return");}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void ruleParams(Rule theRule) throws ParseException {
    ruleParam(theRule);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      ruleParam(theRule);
    }
  }

  final public void ruleParam(Rule theRule) throws ParseException {
    Token tname;
    RuleVariable param;
    param = parameter();
        try
        {
            theRule.getQueue().addParameter(param);
        }
        catch (RuleCreationException e)
        {
            Token tt = getToken(0);
            StringBuffer buf = new StringBuffer(e.getMessage());
            buf.append("\u005cnRule: " + theRule.getName() + "\u005cnLine " + tt.beginLine + " Column " + token.beginColumn);
            {if (true) throw new ParseException(buf.toString());}
        }
  }

  final public RuleVariable parameter() throws ParseException {
    Token t;
    Token defaultToken = null;
    String defaultValue = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      t = variablename();
      if (jj_2_1(2)) {
        jj_consume_token(ASSIGNMENT);
        defaultValue = stringValue();
      } else {
        ;
      }
        StringVariable sv = new StringVariable(t.image);
        if (defaultValue != null) {
            sv.setParameterDefaultValue(defaultValue);
        }
        {if (true) return sv;}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      t = variablename();
      if (jj_2_2(2)) {
        jj_consume_token(ASSIGNMENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOATLITERAL:
          defaultToken = doubleValue();
          break;
        case INTEGERLITERAL:
          defaultToken = integerValue();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
        DoubleVariable dv = new DoubleVariable(t.image);
        if (defaultToken != null) {
            dv.setParameterDefaultValue(defaultToken.image);
        }
        {if (true) return dv;}
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      t = variablename();
      if (jj_2_3(2)) {
        jj_consume_token(ASSIGNMENT);
        defaultToken = integerValue();
      } else {
        ;
      }
        IntegerVariable iv = new IntegerVariable(t.image);
        if (defaultToken != null) {
            iv.setParameterDefaultValue(defaultToken.image);
        }
        {if (true) return iv;}
      break;
    case RESULT:
      jj_consume_token(RESULT);
      t = variablename();
        ResultVariable resv = new ResultVariable(t.image);
        resv.setHasParameterDefault(true);
        {if (true) return resv;}
      break;
    case DATE:
      jj_consume_token(DATE);
      t = variablename();
      if (jj_2_4(2)) {
        jj_consume_token(ASSIGNMENT);
        defaultValue = stringValue();
      } else {
        ;
      }
        DateVariable dtv = new DateVariable(t.image);
        if (defaultToken != null) {
            dtv.setParameterDefaultValue(defaultToken.image);
        }
        {if (true) return dtv;}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      t = variablename();
      if (jj_2_5(2)) {
        jj_consume_token(ASSIGNMENT);
        defaultToken = booleanValue();
      } else {
        ;
      }
        BooleanVariable bv = new BooleanVariable(t.image);
        if (defaultToken != null) {
            bv.setParameterDefaultValue(defaultToken.image);
        }
        {if (true) return bv;}
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      t = variablename();
        Array array = new Array(t.image);
        array.setHasParameterDefault(true);
        {if (true) return array;}
      break;
    case TABLE:
      jj_consume_token(TABLE);
      t = variablename();
        Table table = new Table(t.image);
        table.setHasParameterDefault(true);
        {if (true) return table;}
      break;
    case EXTENSION:
      jj_consume_token(EXTENSION);
      t = variablename();
      {if (true) return new Extension(t.image);}
      break;
    case REFERENCE:
      jj_consume_token(REFERENCE);
      t = variablename();
        ReferenceVariable refv = new ReferenceVariable(t.image);
        refv.setHasParameterDefault(true);
        {if (true) return refv;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token variablename() throws ParseException {
    Token t;
    t = jj_consume_token(name);
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void doClauses(Rule theRule, InstructionQueue queue) throws ParseException {
    label_3:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
      doClause(theRule, queue);
    }
  }

  final public void doClause(Rule theRule, InstructionQueue queue) throws ParseException {
    if (jj_2_7(3)) {
      nullObjectOperation(queue);
      jj_consume_token(90);
    } else if (jj_2_8(2)) {
      defineVariableClause(queue);
      jj_consume_token(90);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        returnClause(theRule, queue);
        jj_consume_token(90);
        break;
      case ERROR:
        errorClause(theRule, queue);
        jj_consume_token(90);
        break;
      case ASSERT:
        assertClause(theRule, queue);
        jj_consume_token(90);
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_9(3)) {
          setVariableClause(queue);
          jj_consume_token(90);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SWITCH:
            switchClause(theRule, queue);
            break;
          case IF:
            ifClause(theRule, queue);
            break;
          case FOREACH:
            forEachClause(theRule, queue);
            break;
          case WHILE:
            whileClause(theRule, queue);
            break;
          case BREAK:
            breakClause(queue);
            jj_consume_token(90);
            break;
          case PRINT:
            printClause(queue);
            jj_consume_token(90);
            break;
          default:
            jj_la1[12] = jj_gen;
            if (jj_2_10(2)) {
              valueExpression(queue);
              jj_consume_token(90);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void nullObjectOperation(InstructionQueue queue) throws ParseException {
    IValue v;
    v = objectOperation(queue);
        EvaluationInstruction ei = new EvaluationInstruction(v);
        ei.setLineNumber(token.beginLine);
        queue.addInstruction(ei);
  }

  final public void printClause(InstructionQueue queue) throws ParseException {
    IValue v;
    jj_consume_token(PRINT);
    v = valueExpression(queue);
        PrintInstruction pi = new PrintInstruction(v);
        pi.setLineNumber(token.beginLine);
        queue.addInstruction(pi);
  }

  final public void returnClause(Rule theRule, InstructionQueue queue) throws ParseException {
    IValue v;
    jj_consume_token(RETURN);
    v = valueExpression(queue);
        ReturnInstruction ri = new ReturnInstruction();
        try
        {
            ri.setValue(theRule, v);
        }
        catch (RuleCreationException rce)
        {
            StringBuffer buffer = new StringBuffer(rce.getMessage());
            buffer.append("\u005cnLine " + token.beginLine + " Column " + token.beginColumn);
            {if (true) throw new ParseException(buffer.toString());}
        }
        ri.setLineNumber(token.beginLine);
        queue.addInstruction(ri);
  }

  final public void errorClause(Rule theRule, InstructionQueue queue) throws ParseException {
    IValue code = new IntegerVariable(null, 0);
    IValue desc = new StringVariable(null, "");
    jj_consume_token(ERROR);
    code = valueExpression(queue);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      desc = valueExpression(queue);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
        ErrorInstruction ri = new ErrorInstruction();
        try
        {
            ri.setValue(theRule, desc);
            ri.setCode(code);
        }
        catch (RuleCreationException rce)
        {
            StringBuffer buffer = new StringBuffer(rce.getMessage());
            buffer.append("\u005cnLine " + token.beginLine + " Column " + token.beginColumn);
            {if (true) throw new ParseException(buffer.toString());}
        }
        ri.setLineNumber(token.beginLine);
        queue.addInstruction(ri);
  }

  final public void assertClause(Rule theRule, InstructionQueue queue) throws ParseException {
    IValue cond;
    IValue msg = new StringVariable(null, "Assertion Failed");
    jj_consume_token(ASSERT);
    cond = valueExpression(queue);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METHODSEP:
      jj_consume_token(METHODSEP);
      msg = valueExpression(queue);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
        AssertInstruction ri = new AssertInstruction(theRule, cond, msg);
        ri.setLineNumber(token.beginLine);
        queue.addInstruction(ri);
  }

  final public void breakClause(InstructionQueue queue) throws ParseException {
    jj_consume_token(BREAK);
        BreakInstruction bi = new BreakInstruction();
        bi.setLineNumber(token.beginLine);
        queue.addInstruction(bi);
  }

  final public void defineVariableClause(InstructionQueue queue) throws ParseException {
    RuleVariable var = null;
    SetInstruction si;
    IValue v = null;
    Token t;
    boolean durable = false;
    boolean dynamic = false;
    boolean macro = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DURABLE:
      jj_consume_token(DURABLE);
          durable = true;
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
          dynamic = true;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MACRO:
      jj_consume_token(MACRO);
          macro = true;
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    if (jj_2_11(2)) {
      var = parameter();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        jj_consume_token(ARRAY);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLEQUOTE:
        case DOUBLEQUOTE:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case TRUE:
        case FALSE:
        case NOT:
        case NEWLINE:
        case name:
        case INTEGERLITERAL:
        case FLOATLITERAL:
          v = valueExpression(queue);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        t = variablename();
            var = new Array(t.image);
            CreateArrayInstruction cai = new CreateArrayInstruction(t.image, v);
            cai.setLineNumber(token.beginLine);
            queue.addInstruction(cai);
        break;
      case TABLE:
        jj_consume_token(TABLE);
        t = variablename();
            var = new Table(t.image);
            CreateTableInstruction cti = new CreateTableInstruction(t.image);
            cti.setLineNumber(token.beginLine);
            queue.addInstruction(cti);
        break;
      case RULE:
        jj_consume_token(RULE);
        t = variablename();
            var = new RuleAccessor(t.image, queue);
        break;
      case REFERENCE:
        jj_consume_token(REFERENCE);
        t = variablename();
            var = new ReferenceVariable(t.image);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        try
        {
            var.setDurable(durable);
            var.setDynamic(dynamic);
            var.setMacro(macro);
            queue.addVariable(var);
        }
        catch (RuleCreationException e)
        {
            Token tt = getToken(0);
            StringBuffer buf = new StringBuffer(e.getMessage());
            buf.append("\u005cnLine " + tt.beginLine + " Column " + token.beginColumn);
            {if (true) throw new ParseException(buf.toString());}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
      jj_consume_token(ASSIGNMENT);
            si = new SetInstruction();
            si.addVariable(var);
      v = valueExpression(queue);
            si.setValue(v);
            si.setLineNumber(token.beginLine);
            queue.addInstruction(si);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void switchClause(Rule theRule, InstructionQueue queue) throws ParseException {
    SwitchInstruction inst = new SwitchInstruction(queue);
    IValue v;
    String s;
    int _firstLine;
    jj_consume_token(SWITCH);
      _firstLine = token.beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                inst.setStringMatching(true);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    v = valueExpression(queue);
                                 inst.setValue(v);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      jj_consume_token(CASE);
         InstructionQueue q = new InstructionQueue();
         q.setParent(queue);
      s = constant();
      jj_consume_token(METHODSEP);
      doClauses(theRule, q);
         inst.addCase(s, q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFCASE:
      jj_consume_token(DEFCASE);
      jj_consume_token(METHODSEP);
         InstructionQueue q = new InstructionQueue();
         q.setParent(queue);
      doClauses(theRule, q);
                              inst.setDefaultCase(q);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
        inst.setLineNumber(_firstLine);
        queue.addInstruction(inst);
  }

  final public void forEachClause(Rule theRule, InstructionQueue queue) throws ParseException {
    IValue startValue;
    IValue endValue;
    ForEachInstruction fei = new ForEachInstruction(queue);
    Token t;
    jj_consume_token(FOREACH);
    jj_consume_token(LPAREN);
    t = variablename();
    jj_consume_token(IN);
    startValue = valueExpression(queue);
    jj_consume_token(TO);
    endValue = valueExpression(queue);
    jj_consume_token(RPAREN);
        fei.getBlock().setParent(queue);
        IntegerVariable index = new IntegerVariable(t.image, startValue.valueAsInteger());
        index.setDurable(true);
        index.setUserMutable(false);

        try {
                fei.setIndexVariable(index);
        } catch (RuleCreationException e) {
            Token tt = getToken(0);
            StringBuffer buf = new StringBuffer(e.getMessage());
            buf.append("\u005cnLine " + tt.beginLine + " Column " + token.beginColumn);
            {if (true) throw new ParseException(buf.toString());}
        }

        fei.setIndexStartValue(startValue);
        fei.setIndexEndValue(endValue);
        fei.setLineNumber(token.beginLine);
        queue.addInstruction(fei);
    jj_consume_token(LBRACE);
    doClauses(theRule, fei.getBlock());
    jj_consume_token(RBRACE);
  }

  final public void whileClause(Rule theRule, InstructionQueue queue) throws ParseException {
    IValue condition;
    WhileInstruction wi;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = valueExpression(queue);
    jj_consume_token(RPAREN);
        wi = new WhileInstruction(queue);
        wi.getBlock().setParent(queue);
        wi.setCondition(condition);
        wi.setLineNumber(token.beginLine);
        queue.addInstruction(wi);
    jj_consume_token(LBRACE);
    doClauses(theRule, wi.getBlock());
    jj_consume_token(RBRACE);
  }

  final public void ifClause(Rule theRule, InstructionQueue queue) throws ParseException {
    IValue condition;
    IfInstruction ii = new IfInstruction(queue);
    InstructionQueue q;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    condition = valueExpression(queue);
    jj_consume_token(RPAREN);
        ii.setCondition(condition);
        ii.setLineNumber(token.beginLine);
        queue.addInstruction(ii);
        ii.getIfBlock().setParent(queue);
    jj_consume_token(LBRACE);
    doClauses(theRule, ii.getIfBlock());
    jj_consume_token(RBRACE);
    label_5:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      condition = valueExpression(queue);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
           q = ii.addElseIfBlock(condition);
           q.setParent(queue);
      doClauses(theRule, q);
      jj_consume_token(RBRACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LBRACE);
         ii.getElseBlock().setParent(queue);
      doClauses(theRule, ii.getElseBlock());
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void setVariableClause(InstructionQueue queue) throws ParseException {
    SetInstruction instr = new SetInstruction();
    IValue v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case name:
      setvariables(queue, instr);
      jj_consume_token(ASSIGNMENT);
      v = valueExpression(queue);
             instr.setValue(v);
      break;
    case SET:
      jj_consume_token(SET);
      jj_consume_token(TO);
      v = valueExpression(queue);
             instr.setValue(v);
      jj_consume_token(METHODSEP);
      setvariables(queue, instr);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        instr.setLineNumber(token.beginLine);
        queue.addInstruction(instr);
  }

  final public void setvariables(InstructionQueue queue, SetInstruction instr) throws ParseException {
    setvariable(queue, instr);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      setvariable(queue, instr);
    }
  }

  final public void setvariable(InstructionQueue queue, SetInstruction instr) throws ParseException {
    Token t;
    IValue v = null;
    IValue v2 = null;
    boolean isArray = false;
    boolean isTable = false;
    t = jj_consume_token(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      if (jj_2_13(3)) {
        jj_consume_token(LBRACKET);
        v = valueExpression(queue);
        jj_consume_token(RBRACKET);
               isArray = true;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          v = valueExpression(queue);
          jj_consume_token(COMMA);
          v2 = valueExpression(queue);
          jj_consume_token(RBRACKET);
               isTable = true;
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
        RuleVariable rv = queue.getVariable(t.image);
        if (rv == null)
        {
            {if (true) throw new ParseException("Reference to undefined variable: " + t.image
              + " at Line " + t.beginLine + " Column " + t.beginColumn);}
        }

        if (isArray)
        {
            if (!rv.isArray())
            {
                {if (true) throw new ParseException("Attempt to index non array variable: " + t.image
                  + " at Line " + t.beginLine + " Column " + t.beginColumn);}
            }
            rv = new ArrayIndexer(queue, (Array)rv, v);
        }
        else if (isTable)
        {
            if (!rv.isTable())
            {
                {if (true) throw new ParseException("Attempt to index non table variable: " + t.image
                  + " at Line " + t.beginLine + " Column " + t.beginColumn);}
            }
            rv = new TableIndexer(queue, (Table)rv, v, v2);
        }

        instr.addVariable(rv);
  }

  final public IValue valueExpression(InstructionQueue queue) throws ParseException {
    ValueExpression exp = new ValueExpression();
    IValue v;
    IValue left = null;
    IValue right = null;
    ValueExpression.Operator operator = ValueExpression.Operator.INVALID;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLEQUOTE:
    case DOUBLEQUOTE:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case TRUE:
    case FALSE:
    case NEWLINE:
    case name:
    case INTEGERLITERAL:
    case FLOATLITERAL:
      left = valueOperand(queue);
       exp.setOperand(true, left);
      label_7:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_7;
        }
        operator = valueOperator();
        right = valueOperand(queue);
            exp.setOperator(operator, right);
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      left = valueOperand(queue);
       exp.setOperand(true, left);
       exp.setOperator(ValueExpression.Operator.NOT, left);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      if (exp.getRightOperand() == null)
      {
          {if (true) return exp.getLeftOperand();}
      }
      else
      {
          {if (true) return exp;}
      }
    throw new Error("Missing return statement in function");
  }

  final public Token booleanValue() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
       {if (true) return t;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
       {if (true) return t;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token doubleValue() throws ParseException {
    Token t;
    t = jj_consume_token(FLOATLITERAL);
       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token integerValue() throws ParseException {
    Token t;
    t = jj_consume_token(INTEGERLITERAL);
       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String stringValue() throws ParseException {
    String t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLEQUOTE:
      jj_consume_token(SINGLEQUOTE);
      t = grabToCharacter('\u005c'');
      break;
    case DOUBLEQUOTE:
      jj_consume_token(DOUBLEQUOTE);
      t = grabToCharacter('"');
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
      t = getNewLine();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void whenClauses(Rule theRule) throws ParseException {
    label_8:
    while (true) {
      conditionClause(theRule);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITION:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_8;
      }
    }
  }

  final public void conditionClause(Rule theRule) throws ParseException {
    IValue v;
    jj_consume_token(CONDITION);
    v = valueExpression(theRule.getQueue());
    jj_consume_token(90);
      theRule.addCondition(v);
  }

  final public void ruleName(Rule theRule) throws ParseException {
  Token t;
    t = jj_consume_token(name);
     theRule.setName(ruleSetName + "$" + t.image);
  }

  final public ValueExpression.Operator valueOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return ValueExpression.Operator.PLUS;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return ValueExpression.Operator.MINUS;}
      break;
    case MULT:
      jj_consume_token(MULT);
             {if (true) return ValueExpression.Operator.MULT;}
      break;
    case DIV:
      jj_consume_token(DIV);
             {if (true) return ValueExpression.Operator.DIV;}
      break;
    case STRCAT:
      jj_consume_token(STRCAT);
               {if (true) return ValueExpression.Operator.STRCAT;}
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
               {if (true) return ValueExpression.Operator.VALEQUALS;}
      break;
    case STREQUALS:
      jj_consume_token(STREQUALS);
                  {if (true) return ValueExpression.Operator.STREQUALS;}
      break;
    case NOTEQUALS:
      jj_consume_token(NOTEQUALS);
                  {if (true) return ValueExpression.Operator.NOTEQUALS;}
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(STREQUALS);
                         {if (true) return ValueExpression.Operator.STRNOTEQUALS;}
      break;
    case GREATERTHAN:
      jj_consume_token(GREATERTHAN);
                    {if (true) return ValueExpression.Operator.GREATERTHAN;}
      break;
    case LESSTHAN:
      jj_consume_token(LESSTHAN);
                 {if (true) return ValueExpression.Operator.LESSTHAN;}
      break;
    case GREATERTHANEQ:
      jj_consume_token(GREATERTHANEQ);
                       {if (true) return ValueExpression.Operator.GREATERTHANEQ;}
      break;
    case LESSTHANEQ:
      jj_consume_token(LESSTHANEQ);
                    {if (true) return ValueExpression.Operator.LESSTHANEQ;}
      break;
    case AND:
      jj_consume_token(AND);
            {if (true) return ValueExpression.Operator.AND;}
      break;
    case OR:
      jj_consume_token(OR);
           {if (true) return ValueExpression.Operator.OR;}
      break;
    case IS:
      jj_consume_token(IS);
           {if (true) return ValueExpression.Operator.BOOLEQUALS;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IValue valueOperand(InstructionQueue queue) throws ParseException {
    Token t;
    IValue v = null;
    IValue v2 = null;
    String s;
    boolean b;
    boolean isArray = false;
    boolean isTable = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATLITERAL:
      t = doubleValue();
      {if (true) return new DoubleVariable(null, t.image);}
      break;
    case INTEGERLITERAL:
      t = integerValue();
      {if (true) return new IntegerVariable(null, t.image);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
      {if (true) return new BooleanVariable(null, true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
      {if (true) return new BooleanVariable(null, false);}
      break;
    case SINGLEQUOTE:
    case DOUBLEQUOTE:
    case NEWLINE:
      s = stringValue();
      {if (true) return new StringVariable(null, s);}
      break;
    case LBRACKET:
      v = arrayValue(queue);
      {if (true) return v;}
      break;
    case LBRACE:
      v = referenceValue(queue);
      {if (true) return v;}
      break;
    default:
      jj_la1[36] = jj_gen;
      if (jj_2_16(2)) {
        v = objectOperation(queue);
      {if (true) return v;}
      } else if (jj_2_17(2)) {
        v = objectDataValue(queue);
      {if (true) return v;}
      } else if (jj_2_18(2)) {
        t = jj_consume_token(name);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          if (jj_2_15(3)) {
            jj_consume_token(LBRACKET);
            v = valueExpression(queue);
            jj_consume_token(RBRACKET);
               isArray = true;
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              jj_consume_token(LBRACKET);
              v = valueExpression(queue);
              jj_consume_token(COMMA);
              v2 = valueExpression(queue);
              jj_consume_token(RBRACKET);
               isTable = true;
              break;
            default:
              jj_la1[34] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        RuleVariable rv = queue.getVariable(t.image);
        if (rv == null)
        {
            {if (true) throw new ParseException("Reference to undefined variable: " + t.image
              + " at Line " + t.beginLine + " Column " + t.beginColumn);}
        }

        if (isArray)
        {
            if (!rv.isArray())
            {
                {if (true) throw new ParseException("Attempt to index non array variable: " + t.image
                  + " at Line " + t.beginLine + " Column " + t.beginColumn);}
            }
            rv = new ArrayIndexer(queue, (Array)rv, v);
        }
        else if (isTable)
        {
            if (!rv.isTable())
            {
                {if (true) throw new ParseException("Attempt to index non table variable: " + t.image
                  + " at Line " + t.beginLine + " Column " + t.beginColumn);}
            }
            rv = new TableIndexer(queue, (Table)rv, v, v2);
        }

        v = rv;
      {if (true) return v;}
      } else if (jj_2_19(3)) {
        jj_consume_token(LPAREN);
        v = valueExpression(queue);
        jj_consume_token(RPAREN);
      {if (true) return v;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IValue referenceValue(InstructionQueue queue) throws ParseException {
    ReferenceVariable ref = new ReferenceVariable(null);
    IValue v;
    jj_consume_token(LBRACE);
    v = valueExpression(queue);
    jj_consume_token(RBRACE);
        ref.setRuntime(queue.getRuleSet().getRuntime());
        ref.setValue(v, true);
        {if (true) return ref;}
    throw new Error("Missing return statement in function");
  }

  final public IValue arrayValue(InstructionQueue queue) throws ParseException {
    Array array = new Array(null);
    IValue v;
    Vector vector = new Vector();
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLEQUOTE:
    case DOUBLEQUOTE:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case TRUE:
    case FALSE:
    case NOT:
    case NEWLINE:
    case name:
    case INTEGERLITERAL:
    case FLOATLITERAL:
      v = valueExpression(queue);
                                    vector.add(v);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        v = valueExpression(queue);
                                       vector.add(v);
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
        array.initialize(vector);
        {if (true) return array;}
    throw new Error("Missing return statement in function");
  }

  final public IValue objectOperation(InstructionQueue queue) throws ParseException {
        IValue v;
    v = directObjectOperation(queue);
                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/**
IValue customSyntaxObjectOperation(InstructionQueue queue) :
{
	IValue v;
}
{
	v = <custom calls here>
	{
		return v;
	}
}
*/
  final public IValue objectDataValue(InstructionQueue queue) throws ParseException {
    ObjectMethodExpression exp = new ObjectMethodExpression();
    Token t;
    IValue val;
    t = jj_consume_token(name);
        String qualifier;
        String nm = t.image;
        if (nm.indexOf('$') == -1) {
                nm = ruleSetName + "$" + nm;
        }

        exp.setObjectName(nm, queue);
    jj_consume_token(VALUESEP);
    t = jj_consume_token(name);
        exp.setMethodName("valueOf", true);
        exp.addParameter(new StringVariable(null, t.image));
        exp.validateParameters();
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public IValue directObjectOperation(InstructionQueue queue) throws ParseException {
    ObjectMethodExpression exp = new ObjectMethodExpression();
    Token t;
    Token t2 = null;
    IValue val;
    boolean useInvoke = true;
    t = jj_consume_token(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METHODSEP:
      jj_consume_token(METHODSEP);
      t2 = jj_consume_token(name);
                useInvoke = false;
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
        String nm = t.image;
        if (useInvoke) {
                if (nm.indexOf('$') == -1) {
                        nm = ruleSetName + "$" + nm;
                }
        }

        exp.setObjectName(nm, queue);

        if (useInvoke) {
                exp.setMethodName("invoke");
        } else {
                exp.setMethodName(t2.image);
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLEQUOTE:
    case DOUBLEQUOTE:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case TRUE:
    case FALSE:
    case NOT:
    case NEWLINE:
    case name:
    case INTEGERLITERAL:
    case FLOATLITERAL:
      val = valueExpression(queue);
          exp.addParameter(val);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        val = valueExpression(queue);
              exp.addParameter(val);
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
        exp.validateParameters();
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public String constant() throws ParseException {
    Token t;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATLITERAL:
      t = doubleValue();
                        {if (true) return t.image;}
      break;
    case INTEGERLITERAL:
      t = integerValue();
                         {if (true) return t.image;}
      break;
    case SINGLEQUOTE:
    case DOUBLEQUOTE:
    case NEWLINE:
      s = stringValue();
                        {if (true) return s;}
      break;
    case TRUE:
    case FALSE:
      t = booleanValue();
                         {if (true) return t.image;}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  String grabToCharacter(char grab) throws ParseException {
   StringBuffer buffer = new StringBuffer();
   SimpleCharStream s = this.token_source.input_stream;

   try
   {
       char cc = s.readChar();
       while (cc != grab)
       {
          if (cc == '\u005c\u005c')
          {
             // get the next character too
             cc = s.readChar();
             if (cc == 'n')
             {
                buffer.append("\u005cn");
             }
             else if (cc == 't')
             {
                buffer.append("\u005ct");
             }
             else
             {
                buffer.append(cc);
             }
          }
          else
          {
              buffer.append(cc);
          }
          cc = s.readChar();
       }
   }
   catch (java.io.IOException e)
   {
      throw new RuntimeException(e.getMessage());
   }
   return buffer.toString();
  }

  String getNewLine() throws ParseException {
    return "\u005cn";
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(DATE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(FLOATLITERAL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(RESULT)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(STRING)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(ERROR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(name)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(METHODSEP)) return true;
    if (jj_scan_token(name)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(name)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(SWITCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(LESSTHANEQ)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(GREATERTHANEQ)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(STREQUALS)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(NOTEQUALS)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(STREQUALS)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_95()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(name)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(STRCAT)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(name)) return true;
    if (jj_scan_token(VALUESEP)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(REFERENCE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(name)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(MACRO)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(REFERENCE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(NEWLINE)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(EXTENSION)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DOUBLEQUOTE)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(DURABLE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(SINGLEQUOTE)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(BOOLEAN)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(INTEGERLITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CSLRuleParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x2b80,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x100000,0x2000,0x2000,0x2b80,0x0,0x180,0x0,0x3eef0000,0x2000,0x2000,0x2380,0x100000,0x2b80,0x0,0x100000,0x2b80,0x180,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400c,0x8,0x4,0x4000,0x24000,0x0,0x1000000,0x4000,0x0,0x0,0x24000,0x2000,0x18000020,0x0,0x0,0x100000,0x200000,0x400000,0x18000,0x20010,0x0,0x0,0x40,0x200,0x40000000,0x1,0x0,0x0,0x0,0x18000,0x18000,0x0,0x400,0x0,0x0,0x0,0x18000,0x0,0x18000,0x0,0x0,0x18000,0x18000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4ff000,0x0,0x0,0xff000,0xff000,0x0,0x0,0xff000,0x0,0x2800000,0xff000,0xc,0x100003,0x0,0x10,0x0,0x0,0x0,0x2e00200,0x3000,0x0,0x20000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x2e00200,0x0,0x200000,0x0,0x3c0,0x0,0x0,0x2a00000,0x0,0x2e00200,0x10,0x0,0x2e00200,0x2a00000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CSLRuleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSLRuleParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSLRuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CSLRuleParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSLRuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CSLRuleParser(CSLRuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CSLRuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[91];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 91; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
