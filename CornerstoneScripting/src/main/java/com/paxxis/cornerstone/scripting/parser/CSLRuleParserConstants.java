/* Generated By:JavaCC: Do not edit this line. CSLRuleParserConstants.java */
/**
 * If you're going to extend the language, you'll need to generate your own parser.
 * So copy this file into your own package directory, and change the package specification
 * below to your own package.
 */
package com.paxxis.cornerstone.scripting.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CSLRuleParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int LBRACE = 7;
  /** RegularExpression Id. */
  int RBRACE = 8;
  /** RegularExpression Id. */
  int LPAREN = 9;
  /** RegularExpression Id. */
  int RPAREN = 10;
  /** RegularExpression Id. */
  int LBRACKET = 11;
  /** RegularExpression Id. */
  int RBRACKET = 12;
  /** RegularExpression Id. */
  int ASSIGNMENT = 13;
  /** RegularExpression Id. */
  int PLUS = 14;
  /** RegularExpression Id. */
  int MINUS = 15;
  /** RegularExpression Id. */
  int MULT = 16;
  /** RegularExpression Id. */
  int DIV = 17;
  /** RegularExpression Id. */
  int COMMA = 18;
  /** RegularExpression Id. */
  int EQUALS = 19;
  /** RegularExpression Id. */
  int NOTEQUALS = 20;
  /** RegularExpression Id. */
  int STREQUALS = 21;
  /** RegularExpression Id. */
  int STRCONTAINS = 22;
  /** RegularExpression Id. */
  int STRCAT = 23;
  /** RegularExpression Id. */
  int GREATERTHAN = 24;
  /** RegularExpression Id. */
  int LESSTHAN = 25;
  /** RegularExpression Id. */
  int GREATERTHANEQ = 26;
  /** RegularExpression Id. */
  int LESSTHANEQ = 27;
  /** RegularExpression Id. */
  int DEF = 28;
  /** RegularExpression Id. */
  int DO = 29;
  /** RegularExpression Id. */
  int WHEN = 30;
  /** RegularExpression Id. */
  int SET = 31;
  /** RegularExpression Id. */
  int TO = 32;
  /** RegularExpression Id. */
  int MERGE = 33;
  /** RegularExpression Id. */
  int INTO = 34;
  /** RegularExpression Id. */
  int ANNO_DESCRIPTION = 35;
  /** RegularExpression Id. */
  int ANNO_PRIVATE = 36;
  /** RegularExpression Id. */
  int RULESET = 37;
  /** RegularExpression Id. */
  int RULE = 38;
  /** RegularExpression Id. */
  int SWITCH = 39;
  /** RegularExpression Id. */
  int CASE = 40;
  /** RegularExpression Id. */
  int EVENT = 41;
  /** RegularExpression Id. */
  int TIMER = 42;
  /** RegularExpression Id. */
  int DEFCASE = 43;
  /** RegularExpression Id. */
  int CONDITION = 44;
  /** RegularExpression Id. */
  int CHANGES = 45;
  /** RegularExpression Id. */
  int RETURNS = 46;
  /** RegularExpression Id. */
  int RETURN = 47;
  /** RegularExpression Id. */
  int RESULT = 48;
  /** RegularExpression Id. */
  int TRUE = 49;
  /** RegularExpression Id. */
  int FALSE = 50;
  /** RegularExpression Id. */
  int REFERENCE = 51;
  /** RegularExpression Id. */
  int VARIABLE = 52;
  /** RegularExpression Id. */
  int START = 53;
  /** RegularExpression Id. */
  int DURABLE = 54;
  /** RegularExpression Id. */
  int DYNAMIC = 55;
  /** RegularExpression Id. */
  int MACRO = 56;
  /** RegularExpression Id. */
  int AS = 57;
  /** RegularExpression Id. */
  int ON = 58;
  /** RegularExpression Id. */
  int BEFORE = 59;
  /** RegularExpression Id. */
  int AFTER = 60;
  /** RegularExpression Id. */
  int FOREACH = 61;
  /** RegularExpression Id. */
  int IF = 62;
  /** RegularExpression Id. */
  int IN = 63;
  /** RegularExpression Id. */
  int ELSE = 64;
  /** RegularExpression Id. */
  int ELSEIF = 65;
  /** RegularExpression Id. */
  int WHILE = 66;
  /** RegularExpression Id. */
  int BREAK = 67;
  /** RegularExpression Id. */
  int ERROR = 68;
  /** RegularExpression Id. */
  int ASSERT = 69;
  /** RegularExpression Id. */
  int METHODSEP = 70;
  /** RegularExpression Id. */
  int VALUESEP = 71;
  /** RegularExpression Id. */
  int SEMICOLON = 72;
  /** RegularExpression Id. */
  int NAMESPACESEP = 73;
  /** RegularExpression Id. */
  int IS = 74;
  /** RegularExpression Id. */
  int AND = 75;
  /** RegularExpression Id. */
  int OR = 76;
  /** RegularExpression Id. */
  int NOT = 77;
  /** RegularExpression Id. */
  int WAIT = 78;
  /** RegularExpression Id. */
  int UNTIL = 79;
  /** RegularExpression Id. */
  int ARRAY = 80;
  /** RegularExpression Id. */
  int TABLE = 81;
  /** RegularExpression Id. */
  int INTEGER = 82;
  /** RegularExpression Id. */
  int DOUBLE = 83;
  /** RegularExpression Id. */
  int BOOLEAN = 84;
  /** RegularExpression Id. */
  int STRING = 85;
  /** RegularExpression Id. */
  int DATE = 86;
  /** RegularExpression Id. */
  int EXTENSION = 87;
  /** RegularExpression Id. */
  int PRINT = 88;
  /** RegularExpression Id. */
  int NEWLINE = 89;
  /** RegularExpression Id. */
  int STRINGLITERAL = 90;
  /** RegularExpression Id. */
  int name = 91;
  /** RegularExpression Id. */
  int INTEGERLITERAL = 92;
  /** RegularExpression Id. */
  int DATELITERAL = 93;
  /** RegularExpression Id. */
  int FLOATLITERAL = 94;
  /** RegularExpression Id. */
  int UNKNOWN = 95;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"//\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<token of kind 6>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\",\"",
    "\"==\"",
    "\"!=\"",
    "<STREQUALS>",
    "<STRCONTAINS>",
    "\"|\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "<DEF>",
    "<DO>",
    "<WHEN>",
    "<SET>",
    "<TO>",
    "<MERGE>",
    "<INTO>",
    "<ANNO_DESCRIPTION>",
    "<ANNO_PRIVATE>",
    "<RULESET>",
    "<RULE>",
    "<SWITCH>",
    "<CASE>",
    "<EVENT>",
    "<TIMER>",
    "<DEFCASE>",
    "<CONDITION>",
    "<CHANGES>",
    "<RETURNS>",
    "<RETURN>",
    "\"Result\"",
    "<TRUE>",
    "<FALSE>",
    "<REFERENCE>",
    "<VARIABLE>",
    "<START>",
    "<DURABLE>",
    "<DYNAMIC>",
    "<MACRO>",
    "<AS>",
    "<ON>",
    "<BEFORE>",
    "<AFTER>",
    "<FOREACH>",
    "<IF>",
    "<IN>",
    "<ELSE>",
    "<ELSEIF>",
    "<WHILE>",
    "<BREAK>",
    "<ERROR>",
    "<ASSERT>",
    "\":\"",
    "\"::\"",
    "\";\"",
    "\"$\"",
    "<IS>",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<WAIT>",
    "<UNTIL>",
    "\"Array\"",
    "\"Table\"",
    "\"Integer\"",
    "\"Double\"",
    "\"Boolean\"",
    "\"String\"",
    "\"Date\"",
    "\"Extension\"",
    "<PRINT>",
    "\"newLine\"",
    "<STRINGLITERAL>",
    "<name>",
    "<INTEGERLITERAL>",
    "<DATELITERAL>",
    "<FLOATLITERAL>",
    "<UNKNOWN>",
  };

}
